<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.3" created="2018-11-03 19:55" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Dave&#039;s programming blog</title>
	<link>http://www.djohn89.com/blog</link>
	<description>Turning tea into code </description>
	<pubDate>Sat, 03 Nov 2018 19:55:57 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.djohn89.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://www.djohn89.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[djohn89]]></wp:author_login><wp:author_email><![CDATA[djohn89@djohn89.com]]></wp:author_email><wp:author_display_name><![CDATA[djohn89]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[science]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Science]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>2</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[science]]></wp:term_slug><wp:term_name><![CDATA[Science]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=4.9.3</generator>

	<item>
		<title>amateurs</title>
		<link>http://www.djohn89.com/blog/2014/10/programmer-worries-amateurs-worry-about-syntax/amateurs/</link>
		<pubDate>Sat, 11 Oct 2014 22:04:00 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2014/10/amateurs.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2014-10-11 22:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-11 22:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[amateurs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2014/10/amateurs.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/10/amateurs.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1012;s:6:"height";i:527;s:4:"file";s:20:"2014/10/amateurs.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"amateurs-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"amateurs-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"amateurs-672x372.png";s:5:"width";i:672;s:6:"height";i:372;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pros</title>
		<link>http://www.djohn89.com/blog/2014/10/programmer-worries-amateurs-worry-about-syntax/pros/</link>
		<pubDate>Sat, 11 Oct 2014 22:04:45 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2014/10/pros.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2014-10-11 22:04:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-11 22:04:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pros]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2014/10/pros.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/10/pros.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1050;s:6:"height";i:326;s:4:"file";s:16:"2014/10/pros.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"pros-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"pros-300x93.png";s:5:"width";i:300;s:6:"height";i:93;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:17:"pros-1024x317.png";s:5:"width";i:1024;s:6:"height";i:317;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"pros-672x326.png";s:5:"width";i:672;s:6:"height";i:326;s:9:"mime-type";s:9:"image/png";}s:25:"twentyfourteen-full-width";a:4:{s:4:"file";s:17:"pros-1038x326.png";s:5:"width";i:1038;s:6:"height";i:326;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>masters</title>
		<link>http://www.djohn89.com/blog/2014/10/programmer-worries-amateurs-worry-about-syntax/masters/</link>
		<pubDate>Sat, 11 Oct 2014 22:05:03 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2014/10/masters.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2014-10-11 22:05:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-11 22:05:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[masters]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2014/10/masters.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/10/masters.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1048;s:6:"height";i:342;s:4:"file";s:19:"2014/10/masters.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"masters-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"masters-300x97.png";s:5:"width";i:300;s:6:"height";i:97;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"masters-1024x334.png";s:5:"width";i:1024;s:6:"height";i:334;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"masters-672x342.png";s:5:"width";i:672;s:6:"height";i:342;s:9:"mime-type";s:9:"image/png";}s:25:"twentyfourteen-full-width";a:4:{s:4:"file";s:20:"masters-1038x342.png";s:5:"width";i:1038;s:6:"height";i:342;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PDF</title>
		<link>http://www.djohn89.com/blog/2014/10/programmer-worries-amateurs-worry-about-syntax/programmer-worries/</link>
		<pubDate>Sat, 11 Oct 2014 22:06:30 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2014/10/Programmer-Worries.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2014-10-11 22:06:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-11 22:06:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[programmer-worries]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2014/10/Programmer-Worries.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/10/Programmer-Worries.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>King of Tokyo Saved Game - Template</title>
		<link>http://www.djohn89.com/blog/2015/01/rolling-dice-for-king-of-tokyo/king-of-tokyo-saved-game-template/</link>
		<pubDate>Sun, 18 Jan 2015 11:15:59 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template.xlsx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2015-01-18 11:15:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-18 11:15:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[king-of-tokyo-saved-game-template]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template.xlsx]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/King-of-Tokyo-Saved-Game-Template.xlsx]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>King of Tokyo Saved Game - Template - Sheet1</title>
		<link>http://www.djohn89.com/blog/2015/01/rolling-dice-for-king-of-tokyo/king-of-tokyo-saved-game-template-sheet1/</link>
		<pubDate>Sun, 18 Jan 2015 11:17:05 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template-Sheet1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2015-01-18 11:17:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-18 11:17:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[king-of-tokyo-saved-game-template-sheet1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template-Sheet1.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/King-of-Tokyo-Saved-Game-Template-Sheet1.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon2015-Johnson-Notifications</title>
		<link>http://www.djohn89.com/blog/2015/02/follow-up-foxcon-2015/foxcon2015-johnson-notifications/</link>
		<pubDate>Mon, 09 Feb 2015 19:12:37 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/02/FoxCon2015-Johnson-Notifications.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2015-02-09 19:12:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-09 19:12:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2015-johnson-notifications]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/02/FoxCon2015-Johnson-Notifications.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/FoxCon2015-Johnson-Notifications.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NWNUG-2015-SQL Server Notifications in a manufacturing environment</title>
		<link>http://www.djohn89.com/blog/2015/02/follow-up-nwnug-presentation/nwnug-2015-sql-server-notifications-in-a-manufacturing-environment/</link>
		<pubDate>Wed, 18 Feb 2015 11:16:56 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/02/NWNUG-2015-SQL-Server-Notifications-in-a-manufacturing-environment.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2015-02-18 11:16:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-18 11:16:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nwnug-2015-sql-server-notifications-in-a-manufacturing-environment]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/02/NWNUG-2015-SQL-Server-Notifications-in-a-manufacturing-environment.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/NWNUG-2015-SQL-Server-Notifications-in-a-manufacturing-environment.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>piday-inscribed-circles.py</title>
		<link>http://www.djohn89.com/blog/2015/03/happy-pi-day/piday-inscribed-circles-py/</link>
		<pubDate>Sat, 14 Mar 2015 13:03:38 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/03/piday-inscribed-circles.py_.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:03:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:03:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[piday-inscribed-circles-py]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>85</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/03/piday-inscribed-circles.py_.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/piday-inscribed-circles.py_.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>inscribed-6</title>
		<link>http://www.djohn89.com/blog/2015/03/happy-pi-day/inscribed-6/</link>
		<pubDate>Sat, 14 Mar 2015 13:10:11 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-6.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:10:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:10:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inscribed-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>85</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-6.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/inscribed-6.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:516;s:6:"height";i:537;s:4:"file";s:23:"2015/03/inscribed-6.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"inscribed-6-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"inscribed-6-288x300.jpg";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"inscribed-6-516x372.jpg";s:5:"width";i:516;s:6:"height";i:372;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>inscribed-10</title>
		<link>http://www.djohn89.com/blog/2015/03/happy-pi-day/inscribed-10/</link>
		<pubDate>Sat, 14 Mar 2015 13:10:13 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-10.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:10:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:10:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inscribed-10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>85</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-10.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/inscribed-10.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:521;s:6:"height";i:540;s:4:"file";s:24:"2015/03/inscribed-10.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"inscribed-10-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"inscribed-10-289x300.jpg";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"inscribed-10-521x372.jpg";s:5:"width";i:521;s:6:"height";i:372;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>inscribed-100000000</title>
		<link>http://www.djohn89.com/blog/2015/03/happy-pi-day/inscribed-100000000/</link>
		<pubDate>Sat, 14 Mar 2015 13:10:13 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-100000000.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:10:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:10:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inscribed-100000000]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>85</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-100000000.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/inscribed-100000000.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:815;s:6:"height";i:516;s:4:"file";s:31:"2015/03/inscribed-100000000.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"inscribed-100000000-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:31:"inscribed-100000000-300x190.jpg";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"inscribed-100000000-672x372.jpg";s:5:"width";i:672;s:6:"height";i:372;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kitting-1</title>
		<link>http://www.djohn89.com/blog/2015/07/how-old-is-kitting-hint-very-old/kitting-1/</link>
		<pubDate>Sun, 12 Jul 2015 19:17:00 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/07/kitting-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2015-07-12 19:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-12 19:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kitting-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>105</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/07/kitting-1.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/kitting-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:373;s:4:"file";s:21:"2015/07/kitting-1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"kitting-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"kitting-1-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"kitting-1-500x372.jpg";s:5:"width";i:500;s:6:"height";i:372;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Johnson Sep 2015 NWO-PASS-SQL Server Notifications</title>
		<link>http://www.djohn89.com/blog/2015/09/sql-server-users-group-presentation-nwo-pass/johnson-sep-2015-nwo-pass-sql-server-notifications/</link>
		<pubDate>Sun, 13 Sep 2015 17:55:16 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/09/Johnson-Sep-2015-NWO-PASS-SQL-Server-Notifications.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2015-09-13 17:55:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-13 17:55:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[johnson-sep-2015-nwo-pass-sql-server-notifications]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>118</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/09/Johnson-Sep-2015-NWO-PASS-SQL-Server-Notifications.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/Johnson-Sep-2015-NWO-PASS-SQL-Server-Notifications.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>handouts for NWO-PASS July 2014 Meeting</title>
		<link>http://www.djohn89.com/blog/2015/09/sql-server-users-group-presentation-nwo-pass/handouts-for-nwo-pass-july-2014-meeting/</link>
		<pubDate>Sun, 13 Sep 2015 17:55:52 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2015/09/handouts-for-NWO-PASS-July-2014-Meeting.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2015-09-13 17:55:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-13 17:55:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[handouts-for-nwo-pass-july-2014-meeting]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>118</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2015/09/handouts-for-NWO-PASS-July-2014-Meeting.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/handouts-for-NWO-PASS-July-2014-Meeting.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon2016-Johnson-AutomotiveWebapps</title>
		<link>http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/foxcon2016-johnson-automotivewebapps/</link>
		<pubDate>Sat, 05 Mar 2016 13:30:56 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-AutomotiveWebapps.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2016-03-05 13:30:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-05 13:30:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2016-johnson-automotivewebapps]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-AutomotiveWebapps.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/FoxCon2016-Johnson-AutomotiveWebapps.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon2016-Johnson-Handouts</title>
		<link>http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/foxcon2016-johnson-handouts/</link>
		<pubDate>Sat, 05 Mar 2016 13:31:46 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-Handouts.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2016-03-05 13:31:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-05 13:31:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2016-johnson-handouts]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-Handouts.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/FoxCon2016-Johnson-Handouts.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>machinelearningdefects</title>
		<link>http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-presentation-using-machine-learning-to-automatically-predict-and-identify-defects-in-automotive-assembly-processes/machinelearningdefects/</link>
		<pubDate>Sat, 28 Jan 2017 18:18:34 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2017/01/MachineLearningDefects.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2017-01-28 18:18:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-28 18:18:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[machinelearningdefects]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>170</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2017/01/MachineLearningDefects.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/MachineLearningDefects.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CollabEdit-Presentation</title>
		<link>http://www.djohn89.com/blog/2017/11/presentation-building-your-own-collaborative-editing-web-forms-for-free/collabedit-presentation/</link>
		<pubDate>Tue, 07 Nov 2017 11:07:06 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2017-11-07 11:07:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-07 11:07:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[collabedit-presentation]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>211</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/CollabEdit-Presentation.pdf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"CollabEdit-Presentation-pdf-150x84.jpg";s:5:"width";i:150;s:6:"height";i:84;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:39:"CollabEdit-Presentation-pdf-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:40:"CollabEdit-Presentation-pdf-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:31:"CollabEdit-Presentation-pdf.jpg";s:5:"width";i:1280;s:6:"height";i:720;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CollabEdit-Presentation</title>
		<link>http://www.djohn89.com/blog/2017/11/presentation-building-your-own-collaborative-editing-web-forms-for-free/collabedit-presentation-2/</link>
		<pubDate>Tue, 07 Nov 2017 11:08:16 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pptx</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2017-11-07 11:08:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-07 11:08:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[collabedit-presentation-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>211</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pptx]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/11/CollabEdit-Presentation.pptx]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Big data: the old new thing</title>
		<link>http://www.djohn89.com/blog/2014/04/big-data-the-old-new-thing/</link>
		<pubDate>Mon, 07 Apr 2014 01:41:19 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[Borrowing a title from <a href="http://blogs.msdn.com/b/oldnewthing/">Raymond Chen's famous blog</a>, I'm starting my own blog with the concept of writing about how data analysis is nothing new, but it's still useful. We'll see how long this experiment goes for.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2014-04-07 01:41:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-07 01:41:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[big-data-the-old-new-thing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Happy Cube Numbers</title>
		<link>http://www.djohn89.com/blog/2014/05/happy-cube-numbers/</link>
		<pubDate>Sat, 10 May 2014 18:13:39 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

Fun programming: this post is based on a certain Project named for a famous mathematician (Euler), but the exact problem is different than the programming question posted there because it is considered bad form to spoil the solutions. This text should be unattractive to Google searches and people looking to spoil the fun of figuring out a hard problem without help.

I'll discuss a related problem which has different mathematical properties but the similar programming challenges. The original problem is better known as <a href="https://en.wikipedia.org/wiki/Happy_number" target="_blank">Happy Numbers</a>. The modification for today's discussion is a variation called Happy Cube Numbers which has the following new properties: A positive integer i is represented in base-10 and its digits are individually summed and cubed to produce another integer j. The following definition captures this function:

let
\[
i=\sum_{k=1}^{\left\lceil \log_{10}i\right\rceil }10^{k-1}d_{k}
\]

and define
\[
f\left(i\right)=\sum_{k}d_{k}^{3}
\]

If f(i)=i, then i is a Happy Cube Number.

For example,

\[
i=371=10^{2}3+10^{1}7+10^{0}1
\]

Which is a Happy Cube Number because:

\[
f(371)=3^{3}+7^{3}+1^{3}=371
\]

Given this definition, we can already write some code and find some Happy Cube Numbers:
<pre><span class="Statement">def</span> <span class="Identifier">sumCubedDigits</span>(N):
    mysum=<span class="Constant">0L</span>
    <span class="Statement">while</span> N &gt; <span class="Constant">0</span>:
        mysum += (N%<span class="Constant">10</span>)**<span class="Constant">3</span>
        N //= <span class="Constant">10</span>
    <span class="Statement">return</span> mysum</pre>
This python code is very fast, O(log10(i)), and we can use it to exhaustively search for 5-digit Happy Cube Numbers:
<pre><span class="Identifier">print</span> [i <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">range</span>(<span class="Constant">100000L</span>) <span class="Statement">if</span> sumCubedDigits(i)==i]
</pre>
Output:
[0, 1, 153, 370, 371, 407]

From these results, we might conjecture that there are no Happy Cube Numbers above 407. Indeed, this is the case because f(i) &lt; i for most i. Consider all 5-digit integers:

\[
i=[d_{5}d_{4}d_{3}d_{2}d_{1}]_{10}=10^{4}d_{5}+10^{3}d_{4}+10^{2}d_{3}+10^{1}d_{2}+10^{0}d_{1}\leq10^{5}
\]

When running these integers through f:

\[
f\left(i\right)=d_{5}^{3}+d_{4}^{3}+d_{3}^{3}+d_{2}^{3}+d_{1}^{3}\leq5\cdot9^{3}
\]

The latter inequality follows because each of the 5 digits can be at most 9. So f(i) is much smaller than i for most integers, and f(i) cannot be equal to i for any number with 4 or more digits. Therefore, the only Happy Cube Numbers are [0, 1, 153, 370, 371, 407], as stated earlier.

There is one other interesting behavior to note: some infinitely repeating cycles of integers can occur in Happy Cube sequences. Consider:
<pre><span class="Identifier">print</span> [<span class="Identifier">int</span>(sumCubedDigits(i)) <span class="Statement">for</span> i <span class="Statement">in</span> [<span class="Constant">133</span>, <span class="Constant">55</span>, <span class="Constant">250</span>, <span class="Constant">133</span>]]</pre>
Output:
<pre>[55, 250, 133, 55]</pre>
Therefore, this cycle will repeat forever. How can other cycles be identified? Writing some code provides a relatively quick solution. For example, two-cycle pairs of integers can be identified by applying f() twice and excluding the trivial solutions (immediately repeating numbers).
<pre><span class="Identifier">print</span> [(i,int(sumCubedDigits(i))) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">range</span>(<span class="Constant">10000L</span>) <span class="Statement">if</span> sumCubedDigits(sumCubedDigits(i))==i <span class="Statement">and</span> sumCubedDigits(i)!=i ]</pre>
Output:
<pre>[(136, 244), (244, 136), (919, 1459), (1459, 919)]</pre>
Bigger integers can't be part of a two-integer cycle because f() decreases too rapidly.

Applying similar logic, we can find three-integer cycles:
<pre>s3 = sumCubedDigits
<span class="Identifier">print</span> [(i,<span class="Identifier">int</span>(s3(i)),<span class="Identifier">int</span>(s3(s3(i)))) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">range</span>(<span class="Constant">10000L</span>) <span class="Statement">if</span> s3(s3(s3(i)))==i <span class="Statement">and</span> s3(s3(i))!=i <span class="Statement">and</span> s3(i)!=i ]
</pre>
Note that I took advantage of python's true object nature to rename the function to s3 to make the command above easier to read. Output:
<pre>[(55, 250, 133), (133, 55, 250), (160, 217, 352), (217, 352, 160), (250, 133, 55), (352, 160, 217)]
</pre>
So if we remove the redundant entries, there are two cycles of length three: (55, 250, 133) and (160, 217, 352), two cycles of length two: (136, 244) and (919, 1459), and five immediately repeating positive integers: 1, 153, 370, 371, 407. Since every iteration of f will rapidly decrease large values of i, we can conjecture that all integers will terminate in one of the above 9 situations.

How do we know that cycles of length four or longer don't exist? Exhaustively searching 4-digit integers with code similar to s3 above shows that such cycles don't occur. A different way to think about it is that this entire exercise for 4-digit integers is trying to solve the following <a href="https://en.wikipedia.org/wiki/Diophantine_equation">Diophantine equation</a>:

\[
10^{3}d_{4}+10^{2}d_{3}+10d_{2}+d_{1}=d_{4}^{3}+d_{3}^{3}+d_{2}^{3}+d_{1}^{3}
\]

Unfortunately, Diophantine equations are very hard to solve. Brute force solutions are often the only ones available. So let's get back to programming. Among all of the 4-digit integers, how many of them will reach each of the 9 situations? How can we efficiently find the final value or cycle from iterating this process on a given integer?

The first programming tool we'll need for an efficient solution is a form of caching because there is no point in continuing to iterate when we've already found the final value or entered a cycle. Memoization solves the caching problem by avoiding a recalculation of an integer we've previously computed. Here's a straightforward class decorator which takes advantage of the fact that Python objects are true classes:
<pre><span class="Statement">class</span> <span class="Identifier">memoizer</span>(<span class="Identifier">object</span>):
    <span class="Constant">'''Decorator. Caches results'''</span>
    <span class="Statement">def</span> <span class="Identifier">__init__</span>(self,fn):
        self.fn = fn
        self.cache = {}
    <span class="Statement">def</span> <span class="Identifier">__call__</span>(self,*args):
        <span class="Statement">if</span> args <span class="Statement">in</span> self.cache:
            <span class="Statement">return</span> self.cache[args]
        <span class="Statement">else</span>:
            val = self.fn(*args)
            self.cache[args] = val
            <span class="Statement">return</span> val</pre>

The next tool we need is some basic recursion and datatypes. We'll (ab)use the python dictionary to get what we need:

<pre>
<span class="Comment"># recurse until a known solution is reached</span>
<span class="PreProc">@</span><span class="Identifier">memoizer</span>
<span class="Statement">def</span> <span class="Identifier">IterateCubedDigits</span>(N):
    <span class="Statement">return</span> IterateCubedDigits(<span class="Identifier">int</span>(sumCubedDigits(N)))

knownValues = {
(<span class="Constant">1</span>,): (<span class="Constant">1</span>),
(<span class="Constant">55</span>,): (<span class="Constant">55</span>, <span class="Constant">250</span>, <span class="Constant">133</span>),
(<span class="Constant">133</span>,): (<span class="Constant">55</span>, <span class="Constant">250</span>, <span class="Constant">133</span>),
(<span class="Constant">136</span>,): (<span class="Constant">136</span>, <span class="Constant">244</span>),
(<span class="Constant">153</span>,): (<span class="Constant">153</span>),
(<span class="Constant">160</span>,): (<span class="Constant">160</span>, <span class="Constant">217</span>, <span class="Constant">352</span>),
(<span class="Constant">217</span>,): (<span class="Constant">160</span>, <span class="Constant">217</span>, <span class="Constant">352</span>),
(<span class="Constant">244</span>,): (<span class="Constant">136</span>, <span class="Constant">244</span>),
(<span class="Constant">250</span>,): (<span class="Constant">55</span>, <span class="Constant">250</span>, <span class="Constant">133</span>),
(<span class="Constant">352</span>,): (<span class="Constant">160</span>, <span class="Constant">217</span>, <span class="Constant">352</span>),
(<span class="Constant">370</span>,): (<span class="Constant">370</span>),
(<span class="Constant">371</span>,): (<span class="Constant">371</span>),
(<span class="Constant">407</span>,): (<span class="Constant">407</span>),
(<span class="Constant">919</span>,): (<span class="Constant">919</span>, <span class="Constant">1459</span>),
(<span class="Constant">1459</span>,): (<span class="Constant">919</span>, <span class="Constant">1459</span>)
}

IterateCubedDigits.cache = knownValues.copy()
</pre>

By only storing the final result, we can avoid using too much memory. The cache uses O(N) entries for N integers, and lookup times will be log(N). That's a good tradeoff because otherwise, we'd have to iterate many more times to find the final value of each integer. 

Finally, we can ask where a given integer goes. E.g., 1337:

<pre>
<span class="Identifier">print</span> IterateCubedDigits(<span class="Constant">1337</span>)
</pre>

Output: [371].

So what happens to the first 20 integers? 

<pre>
list1 = [(i,IterateCubedDigits(i)) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">range</span>(<span class="Constant">1</span>,<span class="Constant">21</span>)]
<span class="Identifier">print</span> <span class="Constant">'</span><span class="Special">\n</span><span class="Constant">'</span>.join(<span class="Identifier">map</span>(<span class="Identifier">str</span>, list1))
</pre>

Output: 
<pre>
(1, 1)
(2, 371)
(3, 153)
(4, (55, 250, 133))
(5, 371)
(6, 153)
(7, 370)
(8, 371)
(9, 153)
(10, 1)
(11, 371)
(12, 153)
(13, (55, 250, 133))
(14, 371)
(15, 153)
(16, (160, 217, 352))
(17, 371)
(18, 153)
(19, 370)
(20, 371)
</pre>

371 and 370 look like popular final values for this process. Let's create a histogram out of the first thousand integers.

<pre>
d={}
list1000 = [(i,IterateCubedDigits(i)) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">range</span>(<span class="Constant">1</span>,<span class="Constant">1001</span>)]
<span class="Statement">for</span> (k1,v1) <span class="Statement">in</span> list1000:
    <span class="Statement">if</span> v1 <span class="Statement">in</span> d:
        d[v1] = d[v1]+<span class="Constant">1</span>
    <span class="Statement">else</span>:
        d[v1] = <span class="Constant">1</span>

hist = <span class="Identifier">sorted</span>(d.items(), key=<span class="Statement">lambda</span> x: x[<span class="Constant">1</span>], reverse=<span class="Identifier">True</span>)
<span class="Identifier">print</span> <span class="Constant">'</span><span class="Special">\n</span><span class="Constant">'</span>.join(<span class="Identifier">map</span>(<span class="Identifier">str</span>,hist))
</pre>

This code requires a little more explanation. Having generated an explicit list of the final values corresponding to each integer, a dictionary is constructed, and it counts the number of values in each of the final values (either a cycle or a single integer). We then sort it by a descending number of counts and print pairs consisting of the final value and the count. 

Output:
<pre>
(153, 333)
(371, 303)
(370, 174)
((55, 250, 133), 66)
((160, 217, 352), 51)
(407, 30)
((919, 1459), 24)
(1, 10)
((136, 244), 9)
</pre>

It looks like my intuition was wrong, at least for the integers up to 1000. 153 is actually the most common final value (33.3%), as compared to 371 at 30.3% and 370 at 17.4%.

Going up to 6-digit numbers, those percentages are similar: 153 is 33.3%, 371 is 29.5%, and 370 is 18.1%. Surprisingly, the (136, 244) cycle is less popular than having 1 as a final value.

Output:
<pre>
(153, 333333)
(371, 295281)
(370, 181041)
((55, 250, 133), 53370)
((160, 217, 352), 39195)
(407, 38052)
((919, 1459), 32274)
(1, 14953)
((136, 244), 12501)
</pre>

The execution time of this algorithm was under 2 seconds for computing these values for the first million integers. A slower algorithm would surely fail under these conditions.

Conclusions: I explored an interesting number theory problem and produced some concise python code which solves the problem very quickly. Algorithmic and mathematical analyses were used to produce correct results with minimal computation.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2014-05-10 18:13:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-10 18:13:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[happy-cube-numbers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Power digit sum</title>
		<link>http://www.djohn89.com/blog/2014/06/power-digit-sum/</link>
		<pubDate>Sat, 28 Jun 2014 17:39:24 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[The Project Euler website appears to have died, so I'm writing a post as a tribute to its memory. An old but fun problem goes like this:

2^15 = 32768, and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

<strong>What is the sum of the digits of the number 2^1000?</strong>

The simplest way to approach this problem is to brute force it in a programming language with big integer support, e.g., Python:
<pre>N=<span class="Constant">2</span>**<span class="Constant">1000</span>

mysum=<span class="Constant">0</span>
<span class="Statement">while</span> N&gt;<span class="Constant">0</span>:
    N, r = <span class="Identifier">divmod</span>(N,<span class="Constant">10</span>)
    mysum += r

<span class="Identifier">print</span> mysum
</pre>

RIP, Project Euler.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2014-06-28 17:39:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-28 17:39:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[power-digit-sum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Living in the past with Vim, for fun and profit</title>
		<link>http://www.djohn89.com/blog/2015/05/living-in-the-past-with-vim-for-fun-and-profit/</link>
		<pubDate>Sat, 09 May 2015 20:50:35 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[A recent news article on HN (HN: <a href="https://news.ycombinator.com/item?id=8084359" target="_blank">Emacs and Vim</a>, <a href="http://www.martinklepsch.org/posts/emacs-and-vim.html" target="_blank">original article here</a>) caused me to pause to reflect on my choice of editors. I use the <a href="http://www.vim.org/download.php#pc" target="_blank">GUI version of Vim</a> for most of my serious editing, but I will also use Eclipse for editing Java, HTML, and JSPs and MS Visual Studio for C++/C#. Why so many different editors?

Each one is good at different things, which is why I use them all. But I keep coming back to Vim when I have to do something harder. For example, regular expression support in Vim is way better than in the other editors. Let's say I need to extract the servlet names in a Tomcat access_log file like this:
<pre>127.0.0.1 - - [18/Oct/2014:15:29:53 -0400] "GET /examples/servlets HTTP/1.1" 302 -
127.0.0.1 - - [18/Oct/2014:15:29:53 -0400] "GET /examples/servlets/ HTTP/1.1" 200 5343
127.0.0.1 - - [18/Oct/2014:15:29:53 -0400] "GET /examples/servlets/images/code.gif HTTP/1.1" 200 292
127.0.0.1 - - [18/Oct/2014:15:29:53 -0400] "GET /examples/servlets/images/return.gif HTTP/1.1" 200 1231
127.0.0.1 - - [18/Oct/2014:15:29:53 -0400] "GET /examples/servlets/images/execute.gif HTTP/1.1" 200 1242
127.0.0.1 - - [18/Oct/2014:15:30:08 -0400] "GET /examples/servlets/servlet/HelloWorldExample HTTP/1.1" 200 359
127.0.0.1 - - [18/Oct/2014:15:30:11 -0400] "GET /examples/servlets/helloworld.html HTTP/1.1" 200 2612
127.0.0.1 - - [18/Oct/2014:15:30:25 -0400] "GET /examples/servlets/servlet/RequestInfoExample HTTP/1.1" 200 693
127.0.0.1 - - [18/Oct/2014:15:30:27 -0400] "GET /examples/servlets/reqinfo.html HTTP/1.1" 200 3674
127.0.0.1 - - [18/Oct/2014:15:30:51 -0400] "GET /examples/servlets/reqheaders.html HTTP/1.1" 200 2304
127.0.0.1 - - [18/Oct/2014:15:30:56 -0400] "GET /examples/servlets/servlet/RequestHeaderExample HTTP/1.1" 200 1067
127.0.0.1 - - [18/Oct/2014:15:31:04 -0400] "GET /examples/servlets/reqparams.html HTTP/1.1" 200 4650
127.0.0.1 - - [18/Oct/2014:15:31:35 -0400] "GET /examples/servlets/servlet/RequestParamExample HTTP/1.1" 200 657
127.0.0.1 - - [18/Oct/2014:15:31:56 -0400] "GET /examples/servlets/cookies.html HTTP/1.1" 200 2741
127.0.0.1 - - [18/Oct/2014:15:31:59 -0400] "GET /examples/servlets/servlet/CookieExample HTTP/1.1" 200 637
127.0.0.1 - - [18/Oct/2014:15:32:02 -0400] "GET /examples/servlets/sessions.html HTTP/1.1" 200 3267
</pre>
So I don't care about most of the content except the timestamp and the servlet name. The following regex solves the problem: <strong>s/^.*[\(.*\)]\.*servlets\(.*\) H.*$/\1 \2/</strong>

I know that looks like gibberish to someone who hasn't used regexes much, but here is what it produces:
<pre>18/Oct/2014:15:29:53 -0400 
18/Oct/2014:15:29:53 -0400 /
18/Oct/2014:15:29:53 -0400 /images/code.gif
18/Oct/2014:15:29:53 -0400 /images/return.gif
18/Oct/2014:15:29:53 -0400 /images/execute.gif
18/Oct/2014:15:30:08 -0400 /servlet/HelloWorldExample
18/Oct/2014:15:30:11 -0400 /helloworld.html
18/Oct/2014:15:30:25 -0400 /servlet/RequestInfoExample
18/Oct/2014:15:30:27 -0400 /reqinfo.html
18/Oct/2014:15:30:51 -0400 /reqheaders.html
18/Oct/2014:15:30:56 -0400 /servlet/RequestHeaderExample
18/Oct/2014:15:31:04 -0400 /reqparams.html
18/Oct/2014:15:31:35 -0400 /servlet/RequestParamExample
18/Oct/2014:15:31:56 -0400 /cookies.html
18/Oct/2014:15:31:59 -0400 /servlet/CookieExample
18/Oct/2014:15:32:02 -0400 /sessions.html
</pre>
That's exactly what I want! It only took one command in Vim. I'm sure you can get your favorite editor to do it too, but Vim has always worked well for me.

Another example: Let's say I need to generate some repetitious code because SQL Server's tsql language doesn't really support arrays, and someone else generated column names with numbers at the end.
<pre><span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAME01, ADDR01, ZIP01
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'01'</span>

<span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAME02, ADDR02, ZIP02
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'02'</span>
</pre>
The task at hand is to copy data from OtherBadTable to BadTable (for IDs 01 to 09). Yes, I know this table has a terrible design, but it wasn't my choice, and I cannot change it. I could use dynamic SQL, but the column names are fixed, and there are only 9 of them.

Here's a VIM solution. Start with the template below:
<pre><span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAMEXX, ADDRXX, ZIPXX
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'YY'</span>
</pre>
Next, make 9 more copies with <strong>ggVGy</strong> (select all lines) and then pasting 9 times with <strong>9P</strong>:
<pre><span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAMEXX, ADDRXX, ZIPXX
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'YY'</span>

<span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAMEXX, ADDRXX, ZIPXX
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'YY'</span>

(etc.)
</pre>
Finally, use <a href="http://vim.wikia.com/wiki/Making_a_list_of_numbers">these commands to make a list</a>: <strong>let i=1 | g/XX/s//\='0'.i/g | let i=i+1 </strong>and then <strong>let i=1 | g/YY/s//\='0'.i/g | let i=i+1 </strong>. The final output is:
<pre><span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAME01, ADDR01, ZIP01
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'01'</span>

<span class="Statement">INSERT</span> <span class="Special">INTO</span> dbo.BadTable (NAME, ADDR, ZIP)
        <span class="Statement">SELECT</span> NAME02, ADDR02, ZIP02
        <span class="Special">FROM</span> dbo.OtherBadTable
        <span class="Special">WHERE</span> ID=<span class="Constant">'02'</span>

(etc.)
</pre>
There! 50 lines of code generated with only 4 Vim commands. Obviously, it's easy to extend this method to as many column names as you need. My point is just that this is a thankless, boring typing task, which can be automated easily in Vim.

I saved the best for my next post, but here's an introduction. Macros in Vim are very powerful. You can record a macro from almost any set of Vim commands and then replay the macro to make a huge number of changes to file painlessly.

<a href="http://www.vim.org/download.php#pc">Download Vim today and give it a try</a>!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2015-05-09 20:50:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-09 20:50:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[living-in-the-past-with-vim-for-fun-and-profit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VBA for common Excel tasks - replacing formulas, autoformatting; thanks Dr. Strangelove</title>
		<link>http://www.djohn89.com/blog/?p=49</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[Or: <span class="st">How I Learned to Stop Worrying and Love the Ribbon</span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2014-07-26 10:34:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Input/Output Completion Ports (IOCP) for fun and profit</title>
		<link>http://www.djohn89.com/blog/2014/09/inputoutput-completion-ports-iocp-for-fun-and-profit/</link>
		<pubDate>Sun, 14 Sep 2014 18:26:19 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[I've written a number of C++/MFC programs using the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365683%28v=vs.85%29.aspx">overlapped I/O approach</a>, and it has always been a real pain. Even MSDN doesn't really seem to like it:

<img src="https://msdn.microsoft.com/dynimg/IC12128.png" alt="" />

The problem with doing asynchronous I/O with OVERLAPPED function calls like ReadFileEx is that you have to be extremely careful with how you design your program to continue executing with a callback function or by waiting on an EVENT handle to get signaled. The callback function requires dealing with <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/06/29/168719.aspx">alertable states</a>, which is <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx">really error-prone</a>.  No, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx">seriously, don't do it </a>because dealing with the re-entrancy can drive you nuts. Alertable wait states are terribly hard to reason about because it is the non-GUI analog to pumping messages (c.f. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/05/03/589110.aspx">Raymond Chen</a>).

So I recently started using IOCP for the same purposes, and I'm happy to report that it works much better! I guess that shouldn't be a surprise because it's <a href="http://www.flounder.com/iocompletion.htm">been recommended by some excellent programmers</a>. Anyway, here's the rough idea of how I got it to work for me:
<ol>
	<li>Create a background thread with an IOCP handle.</li>
	<li>Open a file (or socket, serial port, etc.) with OpenFile and associate it with the IOCP.</li>
	<li>Initiate I/O using ReadFile (not ReadFileEx).</li>
	<li>Handle <strong>both synchronous and asynchronous</strong> completion of the I/O.</li>
</ol>
That last point was the hardest for me to realize that I absolutely have to deal with synchronous, immediate completion of the I/O (not just asynchronous completion from the IOCP). So you really do have to check the return value from ReadFile and also GetLastError() == ERROR_IO_PENDING.

IOCP is so good that it is <a href="http://blog.stephencleary.com/2013/11/there-is-no-thread.html">the basis for C#'s multi-threading I/O</a>. The designers of C# must not have even cared about the old ways to do I/O (e.g., waiting on events, alertable callbacks with APCs, OVERLAPPED callback functions, etc.).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2014-09-14 18:26:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-14 18:26:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inputoutput-completion-ports-iocp-for-fun-and-profit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Publications</title>
		<link>http://www.djohn89.com/blog/2014/09/papers/</link>
		<pubDate>Sun, 14 Sep 2014 18:36:53 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2014-09-14 18:36:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-14 18:36:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[papers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="science"><![CDATA[Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[http://www.djohn89.com/science]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Programmer Worries - Amateurs worry about syntax...</title>
		<link>http://www.djohn89.com/blog/2014/10/programmer-worries-amateurs-worry-about-syntax/</link>
		<pubDate>Sat, 11 Oct 2014 22:09:47 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[I read a famous quote recently about photography:

"Amateurs worry about equipment, professionals worry about money, masters worry about light... I just take pictures... "  - <a href="http://vernontrent.blogspot.com/">Vernon Trent (attrib.)</a>

It inspired me to write this about programming:

"Amateurs worry about syntax, professionals worry about deadlines, masters worry about durability. I just type until I run out of caffeine." - David Johnson.

I also made some graphics to illustrate the point:

<a href="http://www.djohn89.com/blog/wp-content/uploads/2014/10/amateurs.png"><img class="alignnone size-medium wp-image-57" src="http://www.djohn89.com/blog/wp-content/uploads/2014/10/amateurs-300x156.png" alt="amateurs" width="300" height="156" /></a>

<a href="http://www.djohn89.com/blog/wp-content/uploads/2014/10/pros.png"><img class="alignnone size-medium wp-image-58" src="http://www.djohn89.com/blog/wp-content/uploads/2014/10/pros-300x93.png" alt="pros" width="300" height="93" /></a>

<a href="http://www.djohn89.com/blog/wp-content/uploads/2014/10/masters.png"><img class="alignnone size-medium wp-image-59" src="http://www.djohn89.com/blog/wp-content/uploads/2014/10/masters-300x97.png" alt="masters" width="300" height="97" /></a>

I also made a nice printable version (<a href="http://www.djohn89.com/blog/wp-content/uploads/2014/10/Programmer-Worries.pdf">PDF here</a>).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2014-10-11 22:09:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-11 22:09:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[programmer-worries-amateurs-worry-about-syntax]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Amazon Web Services is amazing</title>
		<link>http://www.djohn89.com/blog/2014/11/amazon-web-services-is-amazing/</link>
		<pubDate>Sun, 30 Nov 2014 21:20:32 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[I needed to convert some very large (40,000 x 40,000 pixel) images from one format to another, and I ran into a problem. My desktop PC just couldn't handle the memory requirements despite having 8 GB RAM and a 64-bit OS. Even at 8-bits per pixel, <a href="http://www.imagemagick.org/index.php">imagemagick </a>was failing on the JPEG2000 encoding part of my pipeline. (Details later.)

So I finally decided to try out this whole cloud computing thing for real. I'm very familiar with using other people's virtual machines, but for the first time, I rented my own -- <a href="https://aws.amazon.com/ec2/">an instance with 244 GB RAM and 8x 800 GB SSD hard drives ("i2.8xlarge")</a>. I chose RedHat Enterprise Linux 7 and recompiled imagemagick for the best performance for my situation using one of their free instances. Then I upgraded to the real instance and started processing images.

Three hours on EC later, imagemagick finally finished processing all of the images. The final compressed files were only about 1 GB, but the intermediate files hit hundreds of GB, which would have been very annoying on traditional hard drives. The computations had simultaneously used up to 120 GB RAM and a lotta GHz of processor time. I was very happy with how relatively painless the process was, given that I already knew how to use Linux and I had worked out the bugs on the free instance.

How much did this endeavor cost? $22 and change. I couldn't have even bought a motherboard capable of handling 128 GB RAM, let alone the RAM or CPU necessary to do this job. While I could have downsampled the source images and trivialized the computations, that would have sacrificed the accuracy of the final result. Plus, I didn't really want to own or maintain that hardware in the long term; I just needed to get through some computations right now.

So anyway, here's a hearty endorsement of Amazon Web Services and EC2. It worked great. (They paid me nothing to say this or write this; in fact, I doubt they even noticed the brief spikes in load on their clusters.)

<strong>Image processing details:</strong>

The input image was a set of histology images with about 10 um x 10 um resolution.

&gt;<strong>identify</strong> <strong>heart.jpg</strong>
heart.jpg JPEG<span style="color: #0000ff;"><strong> 45717x38257</strong></span> 45717x38257+0+0 8-bit sRGB 155.9MB 0.000u 0:00.001

My desktop PC was not even close to up to the task:

<strong>&gt;identify -list resource</strong>
File       Area     <span style="color: #0000ff;">Memory       </span> Map       Disk   Thread  Throttle       Time
--------------------------------------------------------------------------------
1536   16.525GB   <span style="color: #0000ff;">7.695GiB</span>   15.39GiB  unlimited        4         0  unlimited

The goal was to eventually get the images into JPEG2000 format, which is really a big problem because the wavelet transform isn't cheap. Anyway, the commands looked something like this:

<strong>&gt;convert -monitor -rotate -45 -crop 33000x10630+24580+10630 -resize 50%  heart.mpc heart.jp2</strong>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2014-11-30 21:20:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-30 21:20:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[amazon-web-services-is-amazing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rolling dice for King of Tokyo</title>
		<link>http://www.djohn89.com/blog/2015/01/rolling-dice-for-king-of-tokyo/</link>
		<pubDate>Fri, 02 Jan 2015 16:43:26 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Edit 1/18/2015</strong>: I forgot to provide a link to a spreadsheet I made for saved games (<a href="http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template.xlsx">King of Tokyo Saved Game -  Excel Template</a>, <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/01/King-of-Tokyo-Saved-Game-Template-Sheet1.pdf">King of Tokyo Saved Game - PDF</a> format).

Over the winter break, I had some time to play a really great board game, King of Tokyo, with my friends and family.  (<a href="http://www.iellogames.com/KingOfTokyo.html">Creator's website</a>, <a href="http://boardgamegeek.com/boardgame/70323/king-tokyo">BGG link</a>, <a href="http://www.amazon.com/IELLO-IEL-51032-King-Tokyo/dp/B004U5R5BI">Amazon link</a>). King of Tokyo shares a dice mechanic similar to Yahtzee:
<p style="padding-left: 30px;"><em>At your turn, you get <strong>three successive throws after each of which you choose whether to keep or discard each of the six special dice</strong>. Your final combination will enable you to win destruction points, hoard energy, restore your health or whack other players into understanding Tokyo is your territory.</em></p>
There are some questions that came up about the optimal strategies and expected outcomes of the 3-roll, six-dice mechanic. Since Yahtzee is so well known, I borrowed a <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo analysis</a> from it to analyze King of Tokyo. For example, the <a href="https://en.wikipedia.org/wiki/Yahtzee#Probabilities">chance of rolling a Yahtzee (all five dice the same in a 3-roll turn) is about 0.046</a> according to Wikipedia.

Anyway, this inspired me to write some Python code to evaluate King of Tokyo.  Note that King of Tokyo uses 6 dice instead of the 5 in Yahtzee, and I arbitrarily assigned damage to be "six" on the dice, energy is "five", and hearts are "four". Here are the questions that came up during our King of Tokyo games.
<h3>Q1: I'm in Tokyo with 4 HP. What are the chances that my next opponent kills my monster if by only keeping damage dice and rerolling everything else?</h3>
This is an excellent question because it determines whether you should leave Tokyo or not. First, here are the possible outcomes:
<pre>Damage dealt(d)     P(X&gt;=d)
0                   1.000
1                   0.962
2                   0.798
3                   0.501
<strong>4                   0.212</strong>
5                   0.052
6                   0.005</pre>
<h5>Table 1. Outcomes for six dice rolled three times with best results kept.</h5>
The attacking monster has a 21.2% chance of dealing at least 4 damage (d is damage dealt, X is a random variable which models the rerolling process), assuming 6 dice are rolled up to 3 times, and only damage dice are kept.

I generated this table using the following Python code:
<pre><span class="PreProc">import</span> numpy <span class="Statement">as</span> np

<span class="Statement">def</span> <span class="Identifier">rollSixes</span>(NRerolls=<span class="Constant">3</span>) :
<span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">xrange</span>(<span class="Constant">0</span>,NRerolls):
<span class="Statement">    if</span> <span class="Constant">6</span> == randint(<span class="Constant">1</span>,<span class="Constant">6</span>) :
<span class="Statement">        return</span> <span class="Constant">1</span>
<span class="Statement">    return</span> <span class="Constant">0</span>

<span class="Statement">def</span> <span class="Identifier">rollHand</span>(NDice=<span class="Constant">6</span>,Cutoff=<span class="Constant">1</span>,NRerolls=<span class="Constant">3</span>) :
    hand = [ rollSixes(NRerolls) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">xrange</span>(<span class="Constant">0</span>,NDice) ]
<span class="Statement">    return</span> hand.count(<span class="Constant">1</span>) &gt;= Cutoff

N=<span class="Constant">100000</span>
NDice=<span class="Constant">6</span>
NRerolls=<span class="Constant">3</span>
Cutoff=<span class="Constant">4</span>

tests2 = [ rollHand(NDice,Cutoff,NRerolls) <span class="Statement">for</span> i <span class="Statement">in</span> <span class="Identifier">xrange</span>(<span class="Constant">0</span>,N) ]

<span class="Identifier">print</span> np.mean(tests2), np.std(tests2)
</pre>
Table 1 is also has the answers to the following questions:

On average, how much damage is dealt to the monster in Tokyo each turn? (Answer: 3 from the table, but 2.53 is the exact number because E[X]=0.421)

Suppose I to heal at least 2 hearts in the next turn, or else my monster will be eliminated. What are the chances that I can roll at least 2 hearts? (Answer: 79.8%)
<h3>Q2. How valuable is the "Extra Head" card?</h3>
The "Extra Head" card allows a monster to roll one extra die (so, 7 dice instead of 6). It's a really expensive and desirable card. Re-running the simulation with NDice=7 gives:
<pre>Damage dealt(d)     P(X&gt;=d)
0                   1.000
1                   0.978
2                   0.865
3                   0.627
4                   0.332
5                   0.117
6                   0.025
7                   0.002</pre>
<h5>Table 2. Seven dice, 3 rerolls, keeping only the best outcomes.</h5>
The extra die may feel really useful, but it makes only a relatively small difference in the statistical outcomes. Instead of a 21.2% chance of dealing at least 4 damage, there is a 33.2% chance of dealing at least 4 damage. Not a huge increase, in my opinion.

The expected value of one die is still 0.421 damage (or energy or hearts), but the expected damage from one turn in Tokyo increases from 2.53 to 2.94. That might be enough to persuade some players to yield Tokyo.
<h3>Q3. How valuable is the "Giant Brain" card?</h3>
"Giant Brain" allows one more reroll each turn (so 4 rerolls instead of 3). Rerunning the simulation with six dice and 4 rerolls:
<pre>Damage dealt(d)     P(X&gt;=d)
0                   1.000
1                   0.987
2                   0.907
3                   0.688
4                   0.376
5                   0.129
6                   0.020</pre>
<h5>Table 3. Six dice, up to 4 rerolls, keeping only the best outcomes.</h5>
I feel like "Giant Brain" is a more powerful card than "Extra Head". The expected value of one die increases from 0.421 damage to 0.518 damage, and the variance of the outcomes also narrows. The improvement in damage (or energy or hearts) is almost the same with each of these cards, but "Giant Brain" is cheaper and not as hotly contested among players.
<h3> Conclusion</h3>
King of Tokyo is a fun game. If you like dice games with more skill than Yahtzee (almost pure chance), but you want them to end more quickly than Monopoly (which can go on for many hours with no progress even for perfectly skilled players), King of Tokyo is an excellent choice because the dice mechanic virtually guarantees that the game will be done in under 20 rounds. It's got most of the fun of a computer dice game like <a href="https://en.wikipedia.org/wiki/XCOM:_Enemy_Unknown">XCOM: Enemy Unknown</a> without needing as much bookkeeping. Congratulations are due to the creators for making a balanced and fun game.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2015-01-02 16:43:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 16:43:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rolling-dice-for-king-of-tokyo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo Software Developers Conference 2015</title>
		<link>http://www.djohn89.com/blog/2015/01/foxcon-toledo-software-developers-conference-2015/</link>
		<pubDate>Sun, 18 Jan 2015 11:13:27 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[I will be presenting a talk called "<span style="color: #ff00ff;">SQL Server Notifications in a manufacturing environment</span>" at the annual FoxCon Toledo Software Developers Conference, Feb 7-8, 2015. Unfortunately, there isn't a website for FoxCon, but Bob Ruple is the organizer. I will post my slides on this website after the conference has started.

Abstract:

Are we there yet? Are we there yet? Queries that poll a database looking for changes can waste tremendous amounts of network bandwidth, CPU, and other precious database server resources. By changing the structure of your SQL client to use query notifications rather than polling, you can reduce computational load on both the client and the server. We'll review the mechanism of asynchronous queuing in Microsoft SQL Server, and then we'll examine a case study of how it can be implemented in an automotive assembly plant. Examples of notifications include routine vehicle brake line leak testing and real-time detection of robot failures.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2015-01-18 11:13:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-18 11:13:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-software-developers-conference-2015]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Follow up - FoxCon 2015</title>
		<link>http://www.djohn89.com/blog/2015/02/follow-up-foxcon-2015/</link>
		<pubDate>Mon, 09 Feb 2015 19:13:27 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[I had a very good time at FoxCon 2015. The other speakers were very good, and I was happy with how my presentation went. I can't say there was much Visual FoxPro code on display, but I learned about many other new and interesting technologies.

Anyway, here's a link to my slides (<a href="http://www.djohn89.com/blog/wp-content/uploads/2015/02/FoxCon2015-Johnson-Notifications.pdf">FoxCon2015-Johnson-Notifications</a> PDF).

Edit: I forgot to include a link to the Youtube video that I showed, "<a href="http://youtu.be/sTbaTmfMaPA"><span id="eow-title" class="watch-title " dir="ltr" title="Jeep   Toledo North Assembly Complex">Jeep Toledo North Assembly Complex,"</span></a> by Automotive Zone.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2015-02-09 19:13:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-09 19:13:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[follow-up-foxcon-2015]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Follow up - NWNUG presentation</title>
		<link>http://www.djohn89.com/blog/2015/02/follow-up-nwnug-presentation/</link>
		<pubDate>Wed, 18 Feb 2015 11:21:48 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[I was very pleased to repeat my presentation, "<span style="color: #ff00ff;">SQL Server Notifications in a manufacturing environment,</span>" (PDF download link: <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/02/NWNUG-2015-SQL-Server-Notifications-in-a-manufacturing-environment.pdf">NWNUG-2015</a>) at the <a href="http://www.meetup.com/NW-NUG/">NWNUG meeting</a>. As before, here is a link to the Youtube video that I showed, "<a href="http://youtu.be/sTbaTmfMaPA"><span id="eow-title" class="watch-title " dir="ltr" title="Jeep   Toledo North Assembly Complex">Jeep Toledo North Assembly Complex,"</span></a> by Automotive Zone.

I am continuing to edit my slides and refine the core messages of the presentation, and I will be presenting it a third time at <a href="http://www.fanug.org/">the FANUG next week</a>.

Thank you again to NWNUG, Jason Follas, and Bob Ruple for these opportunities to present my work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2015-02-18 11:21:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-18 11:21:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[follow-up-nwnug-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Follow up – FANUG presentation</title>
		<link>http://www.djohn89.com/blog/2015/03/follow-up-fanug-presentation/</link>
		<pubDate>Sat, 14 Mar 2015 13:01:20 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[I repeated my presentation, "<span style="color: #ff00ff;">SQL Server Notifications in a manufacturing environment,</span>" (PDF download link: <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/02/NWNUG-2015-SQL-Server-Notifications-in-a-manufacturing-environment.pdf">NWNUG-2015</a>) at the <a href="http://www.fanug.org/">the FANUG meeting</a> on Feb 19. Sorry for the delay in posting this link. Anyway, as before, here is a link to the Youtube video that I showed, "<a href="http://youtu.be/sTbaTmfMaPA"><span id="eow-title" class="watch-title " dir="ltr" title="Jeep   Toledo North Assembly Complex">Jeep Toledo North Assembly Complex,"</span></a> by Automotive Zone.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:01:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:01:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[follow-up-fanug-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Happy Pi Day!</title>
		<link>http://www.djohn89.com/blog/2015/03/happy-pi-day/</link>
		<pubDate>Sat, 14 Mar 2015 13:23:04 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[To celebrate Pi Day, I wrote a Python program for my Raspberry Pi. It's a simple demonstration of <a href="https://en.wikipedia.org/wiki/Pi#Polygon_approximation_era">Archimedes's method for calculating upper and lower bounds on Pi</a>. Of course, there are much faster ways to calculate Pi now, but Archimedes's method is visual and easy to understand.

Download the python program here: <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/03/piday-inscribed-circles.py_.txt">piday-inscribed-circles.py</a> (Works well on any version of Windows or Linux with python 2.7 or newer and pyqt4. The Raspberry Pi is optional, but it adds to the pun, and thus the fun.)

Here's an overview of the program: you can inscribe a hexagon and also circumscribe a hexagon around a circle. If the circle has a radius of 2, then the perimeter of the hexagons provide lower and upper bounds on Pi, respectively:

<a href="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-6.jpg"><img class="alignnone size-medium wp-image-87" src="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-6-288x300.jpg" alt="inscribed-6" width="288" height="300" /></a>

Increasing to 10 sides (decagon) improves the bounds:

<a href="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-10.jpg"><img class="alignnone size-medium wp-image-88" src="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-10-289x300.jpg" alt="inscribed-10" width="289" height="300" /></a>

Pushing it to the limit of N=100,000,000 sided n-gons, the bounds on Pi reach the limits of double precision floating point numbers (about 16 digits of Pi):

<a href="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-100000000.jpg"><img class="alignnone  wp-image-89" src="http://www.djohn89.com/blog/wp-content/uploads/2015/03/inscribed-100000000-300x190.jpg" alt="inscribed-100000000" width="634" height="401" /></a>

This method isn't efficient because the regular n-gons are not a very tight boundary on the circle. Other mathematicians proved that even billions of sides in an n-gon provide a worse boundary than simpler arctangent-based series. Of course, <a href="https://en.wikipedia.org/wiki/Pi#Computer_era_and_iterative_algorithms">Wikipedia has the whole story here</a>.

Maybe next year I'll have time to combine the puns with Monty Python: <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method#Introduction">a Monte Carlo simulation for calculating Pi</a>, written in Python, running on a Raspberry Pi, drawing part of a Monty Python cartoon.

Anyway, eat some pie and have a happy Pi Day!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 13:23:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-14 13:23:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[happy-pi-day]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wonderware Training</title>
		<link>http://www.djohn89.com/blog/2015/05/wonderware-training/</link>
		<pubDate>Sat, 23 May 2015 19:57:04 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[I took the <a href="http://wonderwarenorth.com/certified-training/">Wonderware System Platform 1 (Wonderware Application Server) training course</a>, which I thought was excellent. I had learned some <a href="http://software.invensys.com/wonderware/">Wonderware</a> scripting at my current job, but that turned out to be a skewed perspective on what Wonderware is actually intended to do. We use just <a href="https://en.wikipedia.org/wiki/Wonderware">the Manufacturing Execution Systems (MES) aspect of Wonderware</a>, which is a shame. It's a deep and powerful product with many great SCADA features (data acquisition, alarming, HMI).

Unfortunately, the price of additional licensing is probably going to prevent me from using it for its intended role of creating HMI displays on a production floor. I can already imagine my boss comparing the price of those licenses against the price of continuing to use MFC/C++ (effectively free, if you ignore time and opportunity costs). There are also other risks and expenses to changing the architecture of an existing, productive plant -- downtime, retraining, computer upgrades, etc. Still, it's fun to imagine redoing everything the "right" way from the start.

One project I could still do: we really should be <a href="https://opcfoundation.org/">using OPC </a>to communicate with devices on our plant floor. I'll see if we can move away from our existing ad hoc communication methods. <a href="https://en.wikipedia.org/wiki/Open_Platform_Communications#Design">OPC is way better </a>than what we're doing right now. Maybe I can make a business case for improved productivity or reduced integration costs. OPC classic uses Component Object Model (COM), which is an old and somewhat frustrating core component of the WIN32 API which has given me lots of headaches over the years, but <a href="https://en.wikipedia.org/wiki/OPC_Unified_Architecture">the new flavor of OPC UA</a> is just web services, which are much easier to understand (albeit more verbose). Too bad the OPC foundation wants thousands of dollars per year for membership; maybe I'll <a href="http://www.omnidssi.com/html/why_omniserver.htm">use OmniServer</a> instead.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2015-05-23 19:57:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-23 19:57:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wonderware-training]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mandatory knowledge for programming interviews</title>
		<link>http://www.djohn89.com/blog/2015/05/mandatory-knowledge-for-programming-interviews/</link>
		<pubDate>Fri, 29 May 2015 10:31:28 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[(This is a "kids of today" complaint, so skip it unless you're willing to hear complaints about job interviews.)

Public service announcement to job applicants: <strong>you must know what <a href="https://en.wikipedia.org/wiki/Big_O_notation">O(N) notation</a> is for the code you write for both runtime operations and memory usage</strong>. I don't care if you have a computer science degree or not, but you cannot write good implementations of algorithms if you don't have a clue about it. Your "8 years of experience" on your resume is garbage if you can't tell me why an O(N) array search is slower than an O(log N) search in almost every case. Also, you need to know how much memory you allocated, even if you don't have to explicitly free it because the garbage collector cleaned up your mess.

No, the programming language doesn't matter. No, your favorite library does not matter. No, there is no magic speedup to be found in Linq, inlined functions, lambda functions, or whatever other garbage you googled. Kids of today! Geez, get offa my lawn.

And while I'm at it, you must know <a href="http://www.flounder.com/workerthreads.htm">the fundamental rule of multi-threaded programming in Windows</a>: <strong>there is only one UI thread, it owns all UI objects, and you cannot access any UI objects from any other thread.</strong> Not ever! Your program will crash and burn with some cryptic errors the next time your callback in the thread pool tries to change the text displayed on screen. <a href="http://www.flounder.com/badprogram.htm">If you don't know how to transition from background threads to the UI thread, that is your fault.</a> No, you can't get away with it because there was no compiler warning message. No, you can't catch every multi-threading exception and silently discard them. No, the operating system will not help you to fix this error. No, your favorite programming language does not absolve you of this responsibility, even if it does have a billion ways to manage threads (C#, I'm looking at you).

<strong>Does nobody learn these concepts anymore in college?</strong> There are so many excellent textbooks available, and it is your responsibility as a professional programmer to read at least some of them. Reading "Sams Teach Yourself C# in 24 Hours" and writing garbage code for a few years does not make you a professional.
<h2>Please read some or all of these before applying to a job and sending me an 8 page resume with glowing but vacuous recommendations:</h2>
<a href="http://i.stanford.edu/%7Eullman/focs.html" target="_blank">Foundations of Computer Science</a>, which is the Stanford textbook used in programming and CS classes. Specifically, Ch 3. The Running Time of Programs.
<p class="r"><a href="http://mitpress.mit.edu/books/introduction-algorithms">Introduction to Algorithms</a>, the MIT standard textbook. Please dear lord tell me you know what a hash function is and what it does. (Or map, dictionary, associative array, or whatever other name your favorite language is now using; the name doesn't matter as long as you know when to use it.)</p>
<a href="http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X">Cracking the Coding Interview: 150 Programming Questions</a>. If you can't write code without an IDE (i.e., by hand on a whiteboard or on paper), you're not going to pass an interview.

<a href="http://www-cs-faculty.stanford.edu/~uno/taocp.html">The Art of Computer Programming</a> by Don Knuth. Any volume. Really, anything written by Knuth. If you don't know what a regex or Turing Machine is, you've got a lot of catching up to do. No, seeing "<a href="http://www.imdb.com/title/tt2084970/">The Imitation Game</a>" does not count.

<a href="http://minix1.woodhull.com/osdi2/">Operating Systems: Design and Implementation</a> by Tanenbaum et al. You must know what a mutex is and why you'd need to use it. No, you cannot google it during the interview. No, you cannot avoid learning about how the OS schedules and manages threads inside your process, even if you never explicitly control it.

Kids of today! Geez. Now please excuse me, I have to mow my lawn.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2015-05-29 10:31:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-29 10:31:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mandatory-knowledge-for-programming-interviews]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is functional programming a really good idea?</title>
		<link>http://www.djohn89.com/blog/?p=112</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Intro</h2>
I played around with F# recently because I recently was thinking about an article written by John Carmack, <a href="http://gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php">In-depth: Functional programming in C++</a>. Carmack argues that you don't have to use a specialty language (e.g., Lisp or Haskell) to get the benefits of functional programming; indeed, you don't even have to use pure functions. By minimizing the side effects of individual functions your code, you can still improve the quality of your programs. I thought it would be worthwhile to test this idea with a program more complicated than FizzBuzz.

So today's candidate for a functional vs. imperative comparison is a variation on <a href="https://en.wikipedia.org/wiki/Mastermind_%28board_game%29">Mastermind</a> called Word Mastermind, as implemented in Fallout 3 and Fallout: New Vegas as the <a href="http://fallout.wikia.com/wiki/Hack">"Terminal Hack" mini-game</a>. The goal is to find the hidden word (M letters long) in a dictionary of N words in the minimum number of guesses, and the opponent reveals only the number of letters in the correct position (0-M). In contrast to the classic game of Mastermind, the opponent does not provide any feedback if a letter is shared with the solution but in the wrong position (c.f. "<a href="https://en.wikipedia.org/wiki/Bulls_and_cows">Bulls and Cows</a>", an older game).
<h2>Example Game</h2>
Consider the following mid-game state, based on the SOWPODS (Europe Scrabble Word List). Only the codemaker knows that the secret word is carpool. So far, the codebreaker has guessed ardours and courser, and received the answers 0 and 1:
<table>
<thead>
<tr>
<th>Word</th>
<th>Correct Letters</th>
</tr>
<tr>
<td>ardours</td>
<td>0</td>
</tr>
<tr>
<td><span style="color: #ff0000;"><strong>carpool</strong></span></td>
<td></td>
</tr>
<tr>
<td>carvers</td>
<td></td>
</tr>
<tr>
<td>courser</td>
<td>1</td>
</tr>
<tr>
<td>deleave</td>
<td></td>
</tr>
<tr>
<td>hundred</td>
<td></td>
</tr>
<tr>
<td>lixivia</td>
<td></td>
</tr>
<tr>
<td>morgues</td>
<td></td>
</tr>
<tr>
<td>perform</td>
<td></td>
</tr>
<tr>
<td>piratic</td>
<td></td>
</tr>
<tr>
<td>preriot</td>
<td></td>
</tr>
<tr>
<td>racquet</td>
<td></td>
</tr>
<tr>
<td>seaters</td>
<td></td>
</tr>
<tr>
<td>slatted</td>
<td></td>
</tr>
<tr>
<td>slummed</td>
<td></td>
</tr>
</thead>
</table>
Based on the currently available information, the codebreaker might guess slatted next because it has no letters in common with ardours, and it shares the second to last letter (e) with courser. But can the codebreaker make a stronger guess or be more certain about how close the game is to ending?

Suppose that the codemaker evaluated all possible games from this dictionary. Evaluating each possible secret word and candidate word yields the following matrix:
<table>
<thead>
<tr>
<th><span style="color: #ff0000; font-weight: bold;">Secret→</span>
Candidate</th>
<th>
<div style="color: #ff0000; font-weight: bold;">ardours</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">carpool</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">carvers</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">courser</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">deleave</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">hundred</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">lixivia</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">morgues</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">perform</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">piratic</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">preriot</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">racquet</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">seaters</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">slatted</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">slummed</div></th>
</tr>
<tr>
<td>ardours</td>
<td>-</td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>carpool</td>
<td></td>
<td>-</td>
<td><span style="font-weight: bold;">3</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>carvers</td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">3</span></td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">3</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>courser</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
</tr>
<tr>
<td>deleave</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>-</td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>hundred</td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td>-</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">2</span></td>
</tr>
<tr>
<td>lixivia</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>-</td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>morgues</td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
</tr>
<tr>
<td>perform</td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>piratic</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
</tr>
<tr>
<td>preriot</td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>racquet</td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
</tr>
<tr>
<td>seaters</td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">3</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td></td>
<td>-</td>
<td><span style="font-weight: bold;">3</span></td>
<td><span style="font-weight: bold;">1</span></td>
</tr>
<tr>
<td>slatted</td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">3</span></td>
<td>-</td>
<td><span style="font-weight: bold;">4</span></td>
</tr>
<tr>
<td>slummed</td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">4</span></td>
<td>-</td>
</tr>
</thead>
</table>
There are 15 possible games (one for each secret word) which can be read as the columns of the matrix. Lixivia would be an uninteresting secret word, and it would make for a longer game, because it has nothing in common for any other word except piratic. In contrast, morgues would be much more interesting because it shares at least one letter with most of the other words in the dictionary.

The rows of the matrix are the candidate words which the codebreaker could choose in each game. Having more non-zero entries in a row makes it a more powerful guess because it provides more information about all of the other words.

Since the number of overlapping letters between any given candidate word and secret word is reflexive, the matrix is always symmetric. This means that more interesting secret words are also better candidate words.

Let's update the matrix to reflect the knowledge the codebreaker gained when guessing ardours and receiving the information that the secret word shares no letters with it. Ardours shares at least one letter with the following words: carvers, morgues, perform, preriot, racquet, and seaters. Therefore, those columns can be eliminated, which reduces the possible states of the game to the following matrix:
<table>
<thead>
<tr>
<th><span style="color: #ff0000; font-weight: bold;">Secret→</span>
Candidate</th>
<th>
<div style="color: #ff0000; font-weight: bold;">carpool</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">courser</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">deleave</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">hundred</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">lixivia</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">piratic</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">slatted</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">slummed</div></th>
</tr>
<tr>
<td>carpool</td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>courser</td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td><span style="font-weight: bold;">2</span></td>
</tr>
<tr>
<td>deleave</td>
<td></td>
<td></td>
<td>-</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>hundred</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td>-</td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td><span style="font-weight: bold;">2</span></td>
</tr>
<tr>
<td>lixivia</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>-</td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>piratic</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td>-</td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
</tr>
<tr>
<td>slatted</td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">1</span></td>
<td>-</td>
<td><span style="font-weight: bold;">4</span></td>
</tr>
<tr>
<td>slummed</td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td></td>
<td></td>
<td><span style="font-weight: bold;">4</span></td>
<td>-</td>
</tr>
</thead>
</table>
Next, the codebreaker guessed courser and got 1 as an answer. That eliminates deleave, lixivia, piratic, and slummed because they don't have 1s in the row for courser. The new matrix is:
<table>
<thead>
<tr>
<th><span style="color: #ff0000; font-weight: bold;">Secret→</span>
Candidate</th>
<th>
<div style="color: #ff0000; font-weight: bold;">carpool</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">hundred</div></th>
<th>
<div style="color: #ff0000; font-weight: bold;">slatted</div></th>
</tr>
<tr>
<td>carpool</td>
<td>-</td>
<td></td>
<td></td>
</tr>
<tr>
<td>hundred</td>
<td></td>
<td>-</td>
<td><span style="font-weight: bold;">2</span></td>
</tr>
<tr>
<td>slatted</td>
<td></td>
<td><span style="font-weight: bold;">2</span></td>
<td>-</td>
</tr>
</thead>
</table>
The game will end within the next two guesses in the worst case scenario. It was much closer to being done than it first appeared.
<h2>Method</h2>
Donald Knuth already gave <a href="https://en.wikipedia.org/wiki/Mastermind_%28board_game%29#Five-guess_algorithm">a very good and simple algorithm</a> for the classic Mastermind puzzle: when choosing the next guess word, pick the word which maximizes the minimum number of other words that it eliminates from the dictionary, assuming that the candidate word is the solution. This is a <a href="https://en.wikipedia.org/wiki/Greedy_algorithm">greedy</a>, <a href="https://en.wikipedia.org/wiki/Minimax">minimax </a>algorithm, which Knuth proved could solve Mastermind in 5 guesses or less.

Applying a similar idea to Terminal Hack, we'll implement the following minimax algorithm: count the number of letters a candidate shares with other words, and for each possible value of that count, take the minimum. That is the minimum number of other words that a given candidate could eliminate. Then, among all the possible minimum scores, take the word with the maximum score.

The following example illustrates the algorithm:

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 21:05:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>This is what passes for Machine Learning</title>
		<link>http://www.djohn89.com/blog/?p=205</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=205</guid>
		<description></description>
		<content:encoded><![CDATA[A recent article, "<a href="https://news.ycombinator.com/item?id=14334746">fWaf – Machine learning driven Web Application Firewall</a>", got some attention on Hacker News. The <a href="http://fsecurify.com/fwaf-machine-learning-driven-web-application-firewall/">author's blog post</a> used Python sklearn, which is a good library. However, I get frustrated with this article when the author failed to do cross validation or to even use separate test and training datasets.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2017-05-14 11:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.djohn89.com/blog/2018/01/220/</link>
		<pubDate>Mon, 01 Jan 2018 16:19:18 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/2018/01/220/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2018-01-01 16:19:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-01 16:19:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[220]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="science"><![CDATA[Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[216]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[post]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C# network sockets vs C++ Win32 IOCP</title>
		<link>http://www.djohn89.com/blog/2015/06/c-network-sockets-vs-c-win32-iocp/</link>
		<pubDate>Sat, 20 Jun 2015 13:56:12 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[I spend a lot of time working on low level network protocols for proprietary hardware, and <a href="http://www.djohn89.com/blog/?p=52">I normally use Win32 IOCP in C++</a>. But a few projects must be implemented in C# for business reasons, and so I've spent a some time implementing nearly equivalent code in the .NET Framework. I figured it's time to write up my favorite C# solutions so far.

Option 1: <strong>EVAP (event-based asynchronous pattern)</strong> with <a href="https://nitoasync.codeplex.com/">Nito Async Sockets</a>. I had <a href="http://blog.stephencleary.com/2014/04/announcement-book.html">an excellent discussion with Stephen Cleary last year</a> about asynchronous socket operations last year, and he convinced me <a href="http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html">to try his library</a>. I've used it on several large projects now, and I really like it. It makes callbacks painless because Nito automatically marshalls into the original (i.e. GUI) thread.

Having said that, I can do the same thing in C++ with only a little more effort using IOCP. Using a background thread to call <span class="st"><em>GetQueuedCompletionStatus </em>and then using<em> PostMessage</em> to get to the GUI thread via a standard window message queue isn't really that hard. I agree that it requires more code, which means more opportunities for errors, but it's almost equivalent to what the the .NET Framework is doing, which requires more overhead. <a href="https://stackoverflow.com/questions/8465615/net-sockets-vs-c-sockets-at-high-performance">Some people have complained about slower speed for high throughput servers with the C# approach</a>, and my experience supports the fact that even the best practices in C# will always be slower than the C++ options. </span>

Option 2: <strong>await</strong> <em>NetworkStream.ReadAsync</em> and <em>WriteAsync</em> (only in .NET 4.5 or newer). I really like this solution for some specific network protocols. These methods allow all the benefits of simple async / await implementations <a href="http://blogs.msdn.com/b/pfxteam/archive/2011/12/15/10248293.aspx">without having to write a Task-based wrapper</a> and handle a bunch of edge cases with Exceptions. If you can't target .NET 4.5, then you're stuck with writing wrappers for Socket.BeginReceive and Socket.BeginWrite and related methods. I'd go back to using EVAP before using the Begin/End pairs because it's easy to leak kernel resources if you don't catch all the Exceptions in EndReceive.

In C++, there isn't anything like async / await, but you can fake it. If you read up on <a href="http://blogs.msdn.com/b/lucian/archive/2013/11/12/talk-async-codegen.aspx">how async is implemented</a>, it is just an <a href="http://codeblog.jonskeet.uk/2012/01/11/eduasync-part-18-changes-between-the-async-ctp-and-the-visual-studio-11-preview/">automatically generated finite state machine</a> applied to a transformed version of the original C# code. It's a really powerful compiler trick, but I have to write FSMs anyway for my programs, so I incorporate the socket events into a larger FSM for the other state transitions in the program. I'll grant that it's <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/10/08/10073039.aspx">a pain to handle both synchronous</a> and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/23/10215586.aspx">asynchronous completions</a> of WSARecv because it doubles the number of state transitions (must check for WSA_IO_PENDING, must <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/17/10106259.aspx">free the OVERLAPPED structure</a> only after <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx">the IO has posted on the IOCP</a>, etc.). But it's still doable. <a href="http://www.flounder.com/iocompletion.htm">I've done worse. Don't judge me!</a> :P

Option 3: <strong>Rxx</strong> (<a href="https://rxx.codeplex.com/">Extensions for Reactive Extensions</a>) with
FromAsyncPattern. OK, I admit I haven't actually tried this approach yet, and I've found a lot of skeptical discussion about it. <a href="http://rxwiki.wikidot.com/101samples">It looks like it might work</a>, but it's as convoluted as anything else I've ever seen with EVAP or await based code. I'm not convinced that I can debug it yet (<a href="http://quotes.cat-v.org/programming/">debugging is twice as hard as writing the code in the first place</a>).

In conclusion: I'm sticking with EVAP until Stephen Cleary finds a way to make Rx with sockets tolerable or until I can install .NET 4.5 on more of my target machines at work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2015-06-20 13:56:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-20 13:56:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-network-sockets-vs-c-win32-iocp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How old is kitting? Hint: very old.</title>
		<link>http://www.djohn89.com/blog/2015/07/how-old-is-kitting-hint-very-old/</link>
		<pubDate>Sun, 12 Jul 2015 20:00:25 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[Kitting is a type of materials feeding, which has been defined as (<a href="https://pure.ltu.se/ws/files/31063471/LTU-EX-08002-SE.pdf">Oskar Carlsson et al., 2008</a>):
<div style="padding-left: 30px;" data-canvas-width="222.6576000000001"><em>In manufacturing systems, the practice of delivering components and subassemblies to the shop floor in predetermined quantities that are placed together in specific containers is generally known as kitting.</em></div>
&nbsp;
<div data-canvas-width="222.6576000000001">This idea is obviously much older. From doing some research, I found articles going back to 1990s describing kitting:</div>
<div data-canvas-width="222.6576000000001"><a href="http://www.djohn89.com/blog/wp-content/uploads/2015/07/kitting-1.jpg"><img class="aligncenter wp-image-106 size-full" src="http://www.djohn89.com/blog/wp-content/uploads/2015/07/kitting-1.jpg" alt="kitting-1" width="500" height="373" /></a></div>
<div data-canvas-width="222.6576000000001">The idea of using kits seems to be old even by the article titled, "Kitting versus line stocking: A conceptual framework and a descriptive model" (<a href="http://deepblue.lib.umich.edu/bitstream/handle/2027.42/29734/0000070.pdf?sequence=1">Bozer and McGinnis, 1992</a>).</div>
&nbsp;
<div data-canvas-width="222.6576000000001">One of the common complaints in the literature seems to be that kitting does not add value; it is just a form of buffering in the supply chain. A movement to make kitting leaner or remove it entirely seems to have been discussed in the mid 2000s (<a href="http://www.optelco.com/pdf/Lean-Kitting.pdf">Vujosevic, 2008</a>). But the problem at that time was that kitting was controlled by the inventory management team, which had no direct or real-time feedback from the production line. When a computerized Manufacturing Execution System (MES) was integrated into the kitting process, there was more value added.</div>
&nbsp;
<div data-canvas-width="222.6576000000001">Skipping ahead a few years and watching some online videos (<a href="https://www.youtube.com/watch?v=SOupf1xdkmM">Muir Omni Graphics, 2012, Youtube</a>), kitting seems to have been integrated into much more diverse applications, e.g., printing stickers on a sheet of paper. <a href="https://www.youtube.com/watch?v=FZmBQRmDgIc">Some people consider kitting</a> to be part of <a href="https://en.wikipedia.org/wiki/5S_%28methodology%29">5S, a specific type of organization</a>. Really, all of these ideas lead back to Japanese manufacturers in the 1980s, and by that I mean <a href="https://www.youtube.com/watch?v=Vjdil2nBCf0">the Toyota lean manufacturing revolution</a>.  But since <b><a href="https://en.wikipedia.org/wiki/Taiichi_Ohno">Taiichi Ohno</a></b> was inspired by the efficiency of American supermarkets in the 1950s, it's fair to use the ideas of <a href="https://en.wikipedia.org/wiki/Lean_manufacturing">the Toyota Production System</a> in modern processes (e.g., kitting).</div>
&nbsp;
<div data-canvas-width="222.6576000000001">So the origin of kitting is somewhere in either a 1950s shopping cart or a 1980s Toyota kit, but either way it's coming from lean manufacturing. I think one of the best examples of this type of manufacturing was covered in <a href="http://www.thisamericanlife.org/radio-archives/episode/403/nummi">the NPR story, "NUMMI"</a>. I highly recommend it.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2015-07-12 20:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-12 20:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-old-is-kitting-hint-very-old]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SQL Server Users Group Presentation (NWO-PASS)</title>
		<link>http://www.djohn89.com/blog/2015/09/sql-server-users-group-presentation-nwo-pass/</link>
		<pubDate>Sun, 13 Sep 2015 18:02:12 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[I was pleased to present my talk, SQL Server Notifications In A Manufacturing Environment, again for the <a href="http://nwo.sqlpass.org/Home.aspx?EventID=3856">Northwest Ohio SQL PASS Chapter</a>. I removed the C# code and replaced it with information relevant to a database administrator - what a Query Notification looks like inside SQL Server, how it affects other clients, etc. The revised slides are linked here <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/09/Johnson-Sep-2015-NWO-PASS-SQL-Server-Notifications.pdf">Johnson Sep 2015 NWO-PASS-SQL Server Notifications</a>. I also made some printed handouts with a summary of the talk - <a href="http://www.djohn89.com/blog/wp-content/uploads/2015/09/handouts-for-NWO-PASS-July-2014-Meeting.pdf">handouts for NWO-PASS Meeting</a>.

The turnout was pretty good, and I got a lot of interesting questions. The most frequent question seems to be about how the Query Notification interacts with transactions, which I addressed in my slides. To summarize the answer: a QN becomes part of the transaction that fired it, so if that transaction rolls back, so does the QN. It's not really much different than how the actions of an INSERT/ UPDATE/ DELETE database trigger become part of another transaction.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2015-09-13 18:02:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-13 18:02:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sql-server-users-group-presentation-nwo-pass]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeMash 2016 Recap - Day 3</title>
		<link>http://www.djohn89.com/blog/2016/01/codemash-2016-recap-day-3/</link>
		<pubDate>Sun, 10 Jan 2016 20:04:06 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[CodeMash was great. I had a good time, and I learned about several important new programming languages and libraries. I'm writing up my notes here about the talks I attended to motivate myself to follow up on them.

The point of going to a conference like CodeMash is to keep learning new technologies. The relentless rate of change in programming can be overwhelming, but it is important to keep learning anyway, even when the latest fads appear to be reinventions of old ideas. (E.g., slack is just IRC on mobile devices, but it seems to be replacing email.) Anyway, to the talks from Day 3:
<h2>Node.js Crash Course</h2>
The bottom line I got from this was that when people talk about microservices, they probably mean node.js. It's appealingly simple: service side javascript with isolated databases are fairly easy to develop and deploy, and the js single event loop structure encourages you to simplify your architecture. Best use: websockets, push notifications in real time.

Overall: an excellent talk about a popular subject.
<h2>Get Some REST –On Practical RESTful API Design</h2>
This talk was overly academic, being pedantic about how URLs should identify objects, not actions. Sure, if you buy into the whole REST architecture for everything, then it is a good idea to have some standards, but I didn't learn any new practical parts of this subject.
<h2>Microservices – Beyond the Hype</h2>
I'm not sure that this talk really got beyond the hype, but it was a rare instance where the abstract perfectly matched the presentation, and I can't really add much beyond what the original author wrote:

<em>"Microservices are all the rage these days. Everyone is trying to sell their vision of SOA as microservices. You know it has reached the mainstream, because the backlash has started, too. When you boil it down, Microservices trade business domain complexity for infrastructure complexity. If you have a lot of business domains, this can help keep your software from turning into a big ball of mud. If you don’t, it’s just building complexity for complexity’s sake. In this talk, we will look at why and when you would want to build microservices, how you would do so, and what to avoid. We won’t fixate on the size of services, but on how to split things apart. After this talk, you will know if you should consider using microservices."</em>

My favorite part of this talk was the discussion of "<a href="http://blog.fogcreek.com/eight-fallacies-of-distributed-computing-tech-talk/">The Eight Fallacies of Distributed Computing.</a>"
<h2>Async Everywhere!</h2>
I love Stephen Cleary's work, and multi-threaded programming is one of my favorite areas to work in (regardless of language). The main point of this talk that driving the adoption of async is being driven by mobile first development (required by app stores) and by cloud first development (scalable server utilization). I couldn't agree more with this message.

Having said that, async/await is just a compiler trick. It's really powerful in some scenarios, and it's helpful to have the compiler create a FSM automatically, but I don't think it really makes the hard problems any easier. How would you use it to solve the dining philosopher's problem or multiple producers multiple consumers problem? I think actors and message passing are required to tackle the hardest problems, and I hope that more programming languages add first class support for those techniques. Async/await is progress, but I'm still "await"ing the techniques which will want to make me forget about mutexes forever.

Anyway, I really loved this talk, and I hope Stephen Cleary keeps raising awareness of this topic.
<h2>A Deep Dive Into Modern Crypto</h2>
Wow, rarely does a presentation make me worry as much as this one did. It's scary to list all of the broken techniques still in popular use: DES, 3DES, RC4, MD5, SHA1. I guess I'd heard most of the flaws before from Bruce Schneier's blog and books, but I haven't seen it all laid bare before. Especially worrisome is the thought of general purpose quantum computers in only 15 years, which could cut the strength of all crypto in half (256-bit ECC RSA down to 128-bit equivalent security) while providing no easy path forward except to massively increase key size.

It's a thought-provoking and deeply worrying topic with implications for online commerce and national security.
<h2>Intelligently Extracting Data from PDFs</h2>
Well, what can you expect from a product pitch? I agree that PDFs lose a lot of information present in the original document (e.g., semantic organization between lines and pages), but I really doubt that OCR'ed text can really be as good as the originals.

The author is an expert on the subject matter, and if this is the most important problem facing your business, I guess I would agree with buying the product he was selling (despite the lack of comparison to other products).
<h2>Everything you wanted to know about writing async, high-concurrency HTTP applications in Java, but were afraid to ask</h2>
I felt this talk was overly specific to the author's product and implementation of HTTP downloads, but he had a lot of entertaining pictures and metaphors. My favorite: CLOSE_WAIT socket errors are like hiding in a grocery store after the business has closed.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2016-01-10 20:04:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-10 20:04:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2016-recap-day-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeMash 2016 Recap – Day 4</title>
		<link>http://www.djohn89.com/blog/2016/01/codemash-2016-recap-day-4/</link>
		<pubDate>Sun, 10 Jan 2016 20:58:48 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>ASP.NET 5: How to Get Your Cheese Back</h2>
This talk didn't do much for me except convince me that Microsoft continues to struggle for relevancy by reinventing the wheel. Rewriting ASP.NET from scratch only serves to frustrate everyone involved with it. Not worth my time.
<h2>A Developer’s Journey from Object Oriented to Functional Programming</h2>
This talk was basically an intro to F#, which I've played with before. I wish the author had spent more time describing the good parts of functional programming because he spent a lot of time just talking about object oriented design. I guess there's no substitute for reading a good textbook functional programming, but I don't think any minds were changed in the audience.

Having said that, it is definitely possible to go overboard with pure functions or LISP-style macros that later make the code unreadable and unmaintainable. It's hard to find the sweet spot of a functional language that doesn't require extra deployment dependencies, and it is still possible to debug it without going insane (haskell is too pure to debug without going insane), and it has enough popularity with other programmers and businesses to not destroy anyone's career and/or code base.

Or you could just keep writing in a common language (like C# but with more lambdas and linq) and wait for this fad to pass, much like every attempt to popularize functional programming in the past.
<h2>Cure What Ails You With This Rx: An Intro To Reactive Extensions</h2>
I love the idea of Reactive Extensions. It's async plus events as an enumerable, which should be a winning combination. If there's one subject I should really spend more time doing and less time just thinking about, it is this one. I don't like how some of the transformation functions have opaque internal state (distinct when changed), and it's all really just for loops under the covers (i.e., iterators), and some of the operands cause every result to be loaded into memory simultaneously (sorting, order by), and some of it looks like a bad SQL optimizer, but the final result looks so clean and simple that I'm left convinced that I should do it anyway.

This talk was presented well, and I wish the author the best of luck with his crazy beehives and temperature measuring circuits, whatever they were.

Side note: maybe Stephen Cleary will finally update Nito Sockets to use Rx, and then I'll be set for life. :)
<h2>Software Development Lessons Learned from Industrial Failures in the 1980s</h2>
This was the worst talk because it was entirely plagiarized from <a href="http://www.thisamericanlife.org/radio-archives/episode/403/nummi">an NPR story about NUMMI</a>. It didn't even have programming. I think that NUMMI and the Toyota Production System are very important subjects in the automotive industry, but the author of this talk spent most of her time giving out prizes and stealing photos from websites and books without attribution. It was at this time that the downsides of CodeMash became apparent to me: there are no published proceedings, so you can't cite work in the conference or hold anyone accountable for the content of their talks. The turnover in technology is so fast that trying to find the signal from the noise in the abstracts is going to be almost impossible anyway.

Oh well, I got plenty of value out of the other talks at CodeMash.
<h2>Great Galloping Cuckoos: Algorithms Faster than log(n)</h2>
I love to learn new algorithms, and this talk covered a few of them:
<ul>
	<li><a href="https://en.wikipedia.org/wiki/Exponential_search" target="_blank">https://en.wikipedia.org/wiki/<wbr />Exponential_search - </a>used when an upper bound is not known a prioiri on the array</li>
	<li><a href="https://en.wikipedia.org/wiki/Interpolation_search" target="_blank">https://en.wikipedia.org/wiki/<wbr />Interpolation_search</a> - assumes data is uniformly distributed, O(N) worst case.</li>
	<li><a href="https://en.wikipedia.org/wiki/Cuckoo_hashing" target="_blank">https://en.wikipedia.org/wiki/<wbr />Cuckoo_hashing</a> - or Peacock hash - uses many hash tables, avoids buckets. I still think using a bigger table and a good hash function is better than using multiple hash functions, but obviously this conclusion is dependent on the distribution of the hash keys</li>
</ul>
This talk made me realize that the majority of programmers in the room had not gotten a CS degree in college, and they did not know the basics of analyzing algorithms in operations performed or memory usage. It worries me to think about how much code must be written without coming close to the harder topics, theoretical or practical. (Heck, I've seen lots of buggy implicit FSMs and bad network socket code, so I shouldn't be surprised.)
<div>The author was trying to do something weird with his Raspberry Pi cluster and full text searches of billions of chemical formulas, which is exactly the kind of madness that CodeMash should encourage.</div>
<h2>Cross-Platform Desktop Apps with Electron</h2>
Somehow I ended the conference back on node.js, but this time for desktop apps, not for servers. It does sound much easier to go cross platform with javascript and Chrome than with Xamarin. Too bad the GUI looks uniformly bland, much like Java desktop apps from 15 years ago. It still might be worth a shot anyway.
<h2>Closing Ceremony</h2>
Wow, this was not worthwhile at all. I should have gone home early because the odds of getting anything in the lottery were very bad (mostly because I didn't know you had to put your ticket into the lottery bowl on Friday morning, but not sooner than that, or else you couldn't win).

Final thoughts: I was pretty tired at the end, but I was glad that I went. It so rare for me to get to talk with any other programmers, let alone experts, and I easily got the value I'd hoped for out of informal discussions about SQL Broker and linq and async. Here's to next year's abstract submission going better.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2016-01-10 20:58:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-10 20:58:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2016-recap-day-4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon2016 - Schedule</title>
		<link>http://www.djohn89.com/blog/2016/01/foxcon2016-schedule/</link>
		<pubDate>Sat, 30 Jan 2016 13:24:49 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><span data-term="goog_565525078">Saturday</span> January 30</h2>
<u>Time</u>        <u>Speaker</u>        <u>Topic</u>

<span data-term="goog_565525079">08:00-09:00</span> <strong>Bob Ruple</strong>      <span style="color: #ff99cc;">Opening Comments</span>

1 <span data-term="goog_565525080">09:00-10:15</span> <strong>Bob Pierce    </strong><span style="color: #ff99cc;">Automating the manufacturing process powered by VFP – A Case Study</span>

<span data-term="goog_565525081">10:15-10:30</span>                Break

2 <span data-term="goog_565525082">10:30-11:45</span> <strong>Kevin Cully    </strong><span style="color: #ff99cc;">Xojo Development with focus on 64bit apps and Raspberry Pi</span>

<strong><span data-term="goog_565525083">11:45-12:45 pm</span>             Lunch at Park Inn Hotel</strong>

3 <span data-term="goog_565525084">12:45-02:00</span> <strong>Mike Levy </strong>    <span style="color: #ff99cc;">On my way through the Actor Model, I met Microsoft Orleans</span>

<span data-term="goog_565525085">02:00-02:15</span>                Break

4 <span data-term="goog_565525086">02:15-03:30</span> <strong>Ondrej Balas</strong>   <span style="color: #ff99cc;">Custom Middlewate in <a style="color: #ff99cc;" href="http://ASP.NET">ASP.NET</a> 5</span>

<span data-term="goog_565525087">03:30-03:45</span>               Break

5 <span data-term="goog_565525088">03:45-05:00</span> <strong>Dave Bernard   </strong><span style="color: #ff99cc;">The Driverless Car Revolution</span>
<h2><span data-term="goog_565525089">Sunday January 31</span></h2>
<u>Time</u>         <u>Speaker </u>      <u>Topic</u>

<span data-term="goog_565525090">09:00-09:15</span>  <strong>Bob Ruple</strong>     <span style="color: #ff99cc;">Opening Comments</span>

6 <span data-term="goog_565525091">09:15-10:30</span>  <strong>David Johnson</strong> <span style="color: #ff99cc;">Building Webapps to Help You Build a Jeep</span>

10:30-10:45                Break

7 <span data-term="goog_565525092">10:45-Noon</span>   <strong>Phil Sherwood </strong><span style="color: #ff99cc;">The Business of Software</span>

<strong>  <span data-term="goog_565525093">Noon-1:15 pm</span>               Lunch at Park Inn Hotel</strong>

8 <span data-term="goog_565525094">01:15-02:30</span>  <strong>Brian   Koryzinski          </strong><span style="color: #ff99cc;">The Secrets of LINQ: the modern day Houdini/Introduction to  DocumentDB</span>

<span data-term="goog_565525095">02:30-03:00</span>                <span style="color: #ff99cc;">Closing Comments</span>

<strong><span data-term="goog_565525096">3:00 pm</span>                    Conference Dismisses</strong>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2016-01-30 13:24:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-30 13:24:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2016-schedule]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon2016 - abstract and references</title>
		<link>http://www.djohn89.com/blog/2016/01/foxcon2016-abstract-and-references/</link>
		<pubDate>Sat, 30 Jan 2016 13:32:11 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Abstract: Building Webapps to Help You Build a Jeep</strong>

Historically, automotive plant operators received part numbers and VINs in printed formats to run production line (including sub-assembly lines, e.g., sequencing and kitting). These "broadcasts" or build sheets were temporarily attached to cars and quickly discarded upon vehicle completion. In contrast to the traditional printouts, this talk will introduce mobile webapps as an effective way to replace paper printouts and provide vital production information quickly and efficiently. Videos of an automotive plant assembly line will illustrate how operators receive and use information from both the original paper and new webapp formats.

References and External Links (videos, etc.):

<a href="https://youtu.be/khbb1vBz_U0">Megafactories Ford F150</a>
23:50 final assembly - JPH through 25:49

<a href="https://youtu.be/wfsRAZUnonI">Four Principles Lean Management - Get Lean in 90 Seconds</a>

<a href="https://youtu.be/TWTLrx_Cr98">Megafactories Dodge Challenger</a>
Broadcast sheets

<a href="https://youtu.be/ZIv2e61SH1A">Kanban Pull Simple Demo</a>
Shows kitting concept

<a href="https://youtu.be/ZoUxkvWin6A">Sonic Production at Lake Orion</a>
Shows kitting carts on the assembly line

<a href="https://youtu.be/o7kM4k86f8U">Digital Picking System By nbtprofessional</a>
Picklights

<a href="https://youtu.be/JRU8J-BxTZY">Chrysler Group LLC Belvidere Assembly Plant</a>
at 3:39, sequenced parts in carts]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date><![CDATA[2016-01-30 13:32:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-30 13:32:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2016-abstract-and-references]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[FoxCon2016 – Presentation and handout | Dave&#039;s programming blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.18.2.65]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-03-05 13:33:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-03-05 13:33:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] see the previous post for the youtube [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>FoxCon2016 – Presentation and handout</title>
		<link>http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/</link>
		<pubDate>Sat, 05 Mar 2016 13:33:04 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[I forgot to upload my slides and the associated handout.

<a href="http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-AutomotiveWebapps.pdf">FoxCon2016-Johnson-AutomotiveWebapps</a>

<a href="http://www.djohn89.com/blog/wp-content/uploads/2016/03/FoxCon2016-Johnson-Handouts.pdf">FoxCon2016-Johnson-Handouts</a>

Please see <a href="http://www.djohn89.com/blog/2016/01/foxcon2016-abstract-and-references/">the previous post</a> for the youtube videos.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2016-03-05 13:33:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-05 13:33:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon2016-presentation-and-handout]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Happy Pi Day 2016! (Galperin&#039;s method)</title>
		<link>http://www.djohn89.com/blog/2016/03/happy-pi-day-2016-galperins-method/</link>
		<pubDate>Tue, 15 Mar 2016 01:26:26 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[This year for Pi Day, I have a demo of π's <a href="https://math.stackexchange.com/questions/138289/intuitive-reasoning-behind-pis-appearance-in-bouncing-balls">appearance in bouncing balls</a>, also known as <a href="http://www.ux1.eiu.edu/~cfgg/">Galperin</a>'s method due to a paper published in 2003 (Playing Pool with π (the Number π from a Billiard Point of View", Regular and Chaotic Dynamics, V. 8, No 4, 2003). Here is <a href="https://youtu.be/4UhPTrHIprk">a youtube video</a> demonstrating the phenomenon:
<iframe src="https://www.youtube.com/embed/4UhPTrHIprk" width="420" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

<a href="https://youtu.be/abv4Fz7oNr0"> Numberphile also produced a video about it</a>, and the NY Times Blog also <a href="http://wordplay.blogs.nytimes.com/2014/03/10/pi/?_r=0">gave a different derivation</a>.

<a href="https://reducedplanckconstant.wordpress.com/2012/07/29/brilliant-billiard-balls-pi-from-the-pool/">Here's a link discussing the math</a>.

Basically, conservation of momentum and conservation of energy produce a system of equations that reduce down to stating that the the cosine of the number of collisions will change from positive to negative at an integer equal to [10^N*π], so the number of collisions will produce digits of π!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2016-03-15 01:26:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-15 01:26:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[happy-pi-day-2016-galperins-method]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TWP Presentation: Real-time Messaging to Webapps from a Production Database</title>
		<link>http://www.djohn89.com/blog/2016/10/twp-presentation-real-time-messaging-to-webapps-from-a-production-database/</link>
		<pubDate>Wed, 19 Oct 2016 11:01:16 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[I am pleased to present a new talk, "Real-time Messaging to Webapps from a Production Database". <a href="/websockets/jeepws.html" target="_blank">Click here to launch the non-interactive presentation</a>. If you want to host by a local socket.io server to show the interactive version of the slides, <a href="/websockets/index.html">follow the instructions here</a>. Here is a <a href="/websockets/jeepws.pdf">link to the PDF version</a> which should work even after all the javascript code has become too old to run in any browser.

Abstract:

WebSockets are a fast and efficient way to push data from servers to browsers on both desktop computers and mobile devices. Well-known examples include stock tickers, chat rooms (e.g. Slack), social media updates, and online games. Learn how WebSockets are used at the Jeep Wrangler plant for messaging and notifications for critical production activities.

This talk will demonstrate Java servlets with CometD, front-end jQuery code, and webapps currently being used to support production of 250,000+ Jeep Wranglers per year. By attending this talk, you will gain a better understanding of the constraints of an automotive assembly line and real-time messaging.

Bio - David Johnson is a software developer at the Toledo South Assembly Plant, which produces the Jeep Wrangler. David splits his time between writing webapps, and automation. He uses Java, C#, C++, and Javascript. Ask him about barcodes!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2016-10-19 11:01:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-19 11:01:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[twp-presentation-real-time-messaging-to-webapps-from-a-production-database]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Presentations List | Dave&#039;s programming blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.djohn89.com/blog/2018/01/presentations-list/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.17.29.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-01-01 16:17:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-01-01 16:17:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Toledo Web Professionals 2016 Presentation: Real-time Messaging to Webapps from a Production Database [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CodeMash 2017 Plans</title>
		<link>http://www.djohn89.com/blog/2017/01/codemash-2017-plans/</link>
		<pubDate>Sun, 08 Jan 2017 11:49:01 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[It's time for <a href="http://www.codemash.org/">CodeMash</a> again. I'm looking forward to learning new things and getting outside my comfort zone, with respect to programming languages and new frameworks. Last year I tried to get familiar with Node.js and microservices. This year, I'm trying to go to more of the functional programming and machine learning talks. I'm somewhat sad that Stephen Cleary doesn't have a presentation this year, and neither do I. I guess the reviewers want a wider variety of presenters, as the acceptance rate was under 20% and there are a lot of new presenters.

Anyway, we'll see how it goes. Time to mash some code!

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 11:49:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-08 11:49:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2017-plans]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeMash 2017 Thu</title>
		<link>http://www.djohn89.com/blog/2017/01/codemash-2017-thu/</link>
		<pubDate>Mon, 16 Jan 2017 00:26:56 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>How to Win Friends and Influence People With Data Visualization by <a href="http://www.codemash.org/speaker/amanda-cinnamon/" target="_blank">Amanda Cinnamon</a>.</strong>
This talk was pretty good because it covered the essentials about making good presentations. Focus on the action you want the audience to take. Don't overwhelm with data. The default Excel charts and tables have too many useless lines. Try using tables for their layouts, not emphasizing or using their lines. Pie charts use a lot of space but make area comparisons hard (nonlinear).

Having said that, this presentation used a lot of xkcd comics, which is cheating. Also, the presenter seemed to be unaware of the wealth of existing books about making good presentations, in particular, <b><i>How to Write and Publish a Scientific Paper</i></b> by Robert A. Day. I emailed it to her, and she said she'd look into it. That's a good outcome.

<strong>A math-free introduction to Neural Networks</strong> by <a href="http://www.codemash.org/speaker/randall-koutnik/" target="_blank">Randall Koutnik</a>.
UI/UX Netflix employee. Enthusiast, not expert. No math, high level talk. Mostly pictures and poorly hand-drawn diagrams. Recommendations: Use Python tensor flow learning, not JS. Try those ANN tutorials again using Tensor Flow. This wasn't a good talk because I didn't learn much. At least the presenter was entertaining with the "Calculords" and "Warror JS" projects he worked on, but I wasn't convinced that he understood ANN very well.

<strong>Why Clock Speeds Won’t Be Getting Much Faster, or: EEs Are Amazing</strong> by <a href="http://www.codemash.org/speaker/dan-wiebe/" target="_blank">Dan Wiebe</a>. This was one of my favorite talks this year, despite it not being news for years. I really liked learning about the main factors currently limiting clock speeds in silicon: propagation delays, capacitative distortion, heat dissipation, speed of light, diode drop, and feature size (manufacturing contaminants). This presenter wasn't an EE, and he didn't seem to know much about the D latch (Flip flop) circuit he showed, but at least he got the facts right, and he gave a solid presentation.

<strong>A Synchronicity – Asynchronous Programming in Android</strong> by <a href="http://www.codemash.org/speaker/john-pendexter/">John Pendexter</a>. This talk was pretty good because the presenter emphasized the two main rules of Android threading and gave specific examples of what can go wrong if you don't. 1. Do not block the UI thread. 2. Do not access the UI outside the UI thread. (These are the same rules in every UI I've ever written for, i.e., Win32 and Android, but their exact details vary widely.) He covered a lot of libraries in a short time, but I was very satisfied with this presentation because I learned some new tricks for Loaders.

<strong>Digital Payments in a Mobile World</strong> by <a href="http://www.codemash.org/speaker/parag-joshi/" target="_blank">Parag Joshi</a>. I enjoyed learning about the different payment methods (Square readers, Stripe, Android Pay, Apple Wallet). The variations in fees are somewhat surprising, but I guess everyone needs to make a profit somehow. It was valuable to learn that there is no "debug" mode for payment APIs. All calls are real! Refund fees are about 30%. Also: charities are treated very differently by some APIs.

Square readers for credit cards are used to build your own POS system. You can do NFC tap, chip reader, or mag stripe read. Square already has an app that businesses can use (no programming required). Even for 3rd party POS, Square App must be used. Fee for manually entering CC number is higher (due to fraud risk).

<strong>Python 3: It's Time</strong> by <a href="http://www.codemash.org/speaker/charles-yost/">Charles Yost</a>. I'm a casual Python user, mostly for Scikit-learn, but I haven't been happy to see the fragmentation of Python 2 vs 3. This talk convinced me that it's OK to just ignore Python 2 at this point. Python 3.0.0 (2008) was a complete rewrite with sluggish performance and few packages. The point of the rewrite was to fix Unicode strings and byte encoding. 3.2.0 was the first good one. Integer division is now float by default, but floor is available. map and filter return iterators. range now behaves like xrange, and xrange is gone. pyenv - easily switch between versions of python.

<strong>Stranger Streams: How to RxAndroid</strong> by <a href="http://www.codemash.org/speaker/michael-yotive/">Michael Yotive</a>. RxAndroid - subscribe to Android UI events as Observables. Schedule.io creates a pool of background threads, but they aren't used unless you observe on them. Warning: Observables are immutable, so calling functions on them will create new Observables. So always use method chaining! Warning: Back Pressure - when consumers can't consume events fast enough. Rx will throw "missing back pressure handler" exception; app dies.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2017-01-16 00:26:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-16 00:26:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2017-thu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo 2017  Software Developers Conference - Abstracts</title>
		<link>http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-software-developers-conference-abstracts/</link>
		<pubDate>Sun, 22 Jan 2017 14:48:03 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[<b>*** Begin Abstracts ***</b>

<span class="FoxconAuthor">Bob Pierce</span>               <span class="FoxconTown">Allentown</span>

<span class="FoxconTitle">Controlling Factory Automation With VFP – Behind The Scenes</span>

Smooth-On, a manufacturer of liquid rubbers and plastics, recently moved their operation into a much larger facility near Allentown PA.  Last year Bob showed a case study of automating a large chemical manufacturing plant using Microsoft Visual FoxPro.  This year he pulls back the curtain and delves  into the structure and code that drives this process and how it is integrated into Smooth-On's custom ERP/MRP (also created in VFP).

<span class="FoxconAuthor">Dave Bernard</span>           <span class="FoxconTown">Atlanta</span>

<span class="FoxconTitle">The Death of Privacy</span>

Companies today can learn almost everything about everyone, especially where they are at any particular time, or where they’ve been over a period of time.  That’s because people holding smartphones carry transmitters of their geolocation data. The phone is the enabler.  I know Google, my Internet service provider, my credit card company, and my phone company all mine my personal data. One day I’ll know as much about me as Google and Facebook do! Facebook has your friends, Google has your email, Flickr has your pictures--everyone has the data that you created, but you don't actually have control over it yourself.

<span class="FoxconAuthor">David Johnson</span>           <span class="FoxconTown">Toledo</span>

<span class="FoxconTitle">Using Machine Learning to Automatically Predict and Identify Defects in Automotive Assembly Processes</span>

Operators use torque tools to build a car with nuts and bolts, but what happens when the tools themselves have problems? In this presentation we will examine a case study of how preventative maintenance and quality inspection can be improved by using machine learning to model the failures observed on the assembly line.  Learn how Bayesian prediction (frequently used in email spam filters) can be applied to predict and identify these failures before they occur.

<span class="FoxconAuthor">Doug Hennig</span>           <span class="FoxconTown">Winnipeg</span>

<span class="FoxconTitle">Windows PowerShell: Batch Files on Steroids</span>

Windows PowerShell has been included with the operating system since Windows 7 and is available for download for Windows XP and Vista. What is PowerShell? It's Microsoft's task automation scripting framework. PowerShell isn't just a replacement for batch files; it can do a lot more than batch files ever could. This session looks at PowerShell, including why you should start using it and how to create PowerShell scripts.

You will learn:

- Why PowerShell is useful

- How to create PowerShell scripts

- The basics of PowerShell programming

<span class="FoxconAuthor">Mark Beno</span>           <span class="FoxconTown">Cleveland</span>

<span class="FoxconTitle">CLEARPATH (<strong>CLE</strong>veland <strong>A</strong>rea <strong>R</strong>esearch <strong>P</strong>latform for <strong>A</strong>dvancing <strong>T</strong>ranslational <strong>H</strong>ealthcare)</span>

As an academic collaboration between Case Western Reserve University, University Hospitals Cleveland Medical Center, and the Cleveland Clinic, the Institute for Computational Biology (ICB) uses the combined resources and expertise of these institutions to achieve its mission, to advance knowledge of human biology through computational methods on big and diverse datasets, and promote the translation of this knowledge into better diagnosis, prognosis, treatment, prevention, and delivery.

For this purpose, CLEARPATH (<strong>CLE</strong>veland <strong>A</strong>rea <strong>R</strong>esearch <strong>P</strong>latform for <strong>A</strong>dvancing <strong>T</strong>ranslational <strong>H</strong>ealthcare) is being proposed to facilitate discovery and research with tools for generating a person’s single synthetic electronic medical record, cohort discovery, and population health analytics.   CLEARPATH aspires to provide a multi-institutional, broad clinical data exchange research collaborative focused on the Cleveland area (including data from, but not limited to, EHRs, disease registries, biorepositories, clinical trials databases, etc.)

<span class="FoxconAuthor">Mike Feltman</span>           <span class="FoxconTown">Toledo</span>

<span class="FoxconTitle">Introducing F1 MD - just what the doctor ordered.</span>

After developing several websites based on Angular and Angular Material I have cobbled together a seed project for new web sites. Mike is tentatively calling it F1 MD (the MD stands for Material Design).  F1 MD makes heavy use of Angular components as building blocks for typical, modern, responsive mobile-friendly websites. It also favors convention over configuration which makes getting a new site up and running with it a snap.  Although any back-end is easily supported, Mike makes heavy use of free storage and Internet services such as Google Drive, Google Sheets, YouTube and Google Calendars.  F1 MD includes components that make it easy to plug in items from any of the aforementioned services.

<span class="FoxconAuthor">Mike Levy</span>           <span class="FoxconTown">Cincinnati</span>

<span class="FoxconTitle">Building Hypermedia APIs using .NET core</span>

For the last couple of years, Mike has dedicated a part of his saw sharpening to the area of Hypermedia APIs. So when Microsoft released <a href="http://ASP.NET" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://ASP.NET&amp;source=gmail&amp;ust=1485182044215000&amp;usg=AFQjCNHKEJuR-EEEULmIPFTuBFRgw4ItDQ">ASP.NET</a> Core, it was only natural to jump into the platform and explore what the product team had delivered. This presentation is a report of his learnings.

<span class="FoxconAuthor">Ondrej Balas</span>           <span class="FoxconTown">Detroit</span>

<span class="FoxconTitle">Identity Management in <a href="http://ASP.NET">ASP.NET</a> Core</span>

Injecting custom code into authentication and authorization in <a href="http://ASP.NET" >ASP.NET</a> has always been a chore. <a href="http://ASP.NET" >ASP.NET</a> Identity is a library built to replace both <a href="http://ASP.NET" >ASP.NET</a> Membership and Simple Membership, making it much easier to implement custom authentication and authorization without the need to rewrite core components. In this session Ondrej will go deep into the abstractions that <a href="http://ASP.NET" >ASP.NET</a> Identity builds atop of, and show how to take advantage of these hook points to implement a custom membership system.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2017-01-22 14:48:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-22 14:48:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-2017-software-developers-conference-abstracts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo 2017 Conference Presentation Schedule</title>
		<link>http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-conference-presentation-schedule/</link>
		<pubDate>Sat, 28 Jan 2017 13:30:02 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Saturday January 28</h2>
<u>Time</u>             <u>Speaker</u>                  <u>Topic</u>

08:00-09:00 <strong>Bob Ruple</strong>           Opening Comments

1 09:00-10:15 <strong>Bob Pierce          </strong>Controlling Factory Automation with VFP – Behind the Scenes

10:15-10:30                 Break

2 10:30-11:45 <strong>Doug Hennig       </strong>Windows Powershell – Batch Files on Steroids

<strong>11:45-12:45 pm</strong><strong>             </strong><strong>Lunch at Park Inn Hotel</strong>

3 12:45-02:00 <strong>Mike Levy </strong>          Building Hypermedia APIs Using .NET Core

02:00-02:15                 Break

4 02:15-03:30 <strong>David Johnson</strong>    Using Machine Learning to Automatically Predict and Identify Defects in Automotive Assembly Processes

03:30-03:45                Break

5 03:45-05:00 <strong>Dave Bernard     </strong>The Death of Privacy
<h2>Sunday January 29</h2>
<u>Time</u>            <u>Speaker </u>                  <u>Topic</u>

09:00-09:15  <strong>Bob Ruple</strong>         Opening Comments

6 09:15-10:15  <strong>Ondrej Balas</strong>     Identity Management in ASP.NET Core

10:15-10:45                Break

7 10:45-noon   <strong>Mike Feltman    </strong>Introducing F1 MD – Just What the Doctor Ordered

<strong>Noon-1:15 pm</strong><strong>               </strong><strong>Lunch at Park Inn Hotel</strong>

8 01:15-02:30  <strong>Mark Beno        </strong>CLEARPATH (<strong>CLE</strong>veland <strong>A</strong>rea <strong>R</strong>esearch <strong>P</strong>latform for <strong>A</strong>dvancing <strong>T</strong>ranslational <strong>H</strong>ealthcare)

02:30-03:00                Closing Comments

<strong>3:00 pm</strong><strong>                </strong><strong>Conference Dismisses</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2017-01-28 13:30:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-28 13:30:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-2017-conference-presentation-schedule]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo 2017 Presentation - Using Machine Learning to Automatically Predict and Identify Defects in Automotive Assembly Processes</title>
		<link>http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-presentation-using-machine-learning-to-automatically-predict-and-identify-defects-in-automotive-assembly-processes/</link>
		<pubDate>Sat, 28 Jan 2017 18:19:14 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[Operators use torque tools to build a car with nuts and bolts, but what happens when the tools themselves have problems? In this presentation Dave will examine a case study of how preventative maintenance and quality inspection can be improved by using machine learning to model the failures observed on the assembly line.  Learn how Bayesian prediction (frequently used in email spam filters) can be applied to predict and identify these failures before they occur.

Presentation download: [ <a href="http://www.djohn89.com/blog/wp-content/uploads/2017/01/MachineLearningDefects.pdf">machinelearningdefects PDF </a>]

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2017-01-28 18:19:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-28 18:19:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-2017-presentation-using-machine-learning-to-automatically-predict-and-identify-defects-in-automotive-assembly-processes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[vioglichfu.7m.pl]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://vioglichfu.7m.pl/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[178.137.88.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-19 05:24:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-19 05:24:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cialis pills http://vioglichfu.7m.pl/</strong>

Many thanks! I enjoy this!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>CodeMash 2017 Fri</title>
		<link>http://www.djohn89.com/blog/2017/01/codemash-2017-fri/</link>
		<pubDate>Tue, 31 Jan 2017 11:27:44 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Horizontally Scaling Node.js and WebSockets by <a href="http://www.codemash.org/speaker/james-simpson/" target="_blank">James Simpson</a>.</strong> Prepare for success with scalability. Automatic failover increases uptime. Load balancers: HAProxy, NGINX, ELB, http-proxy. HAProxy is recommended for not having vendor lock-in and for ease of deployment. Application: nodejs, running on multiple servers. Messaging: Redis, RabbitMQ, ZeroMQ. Redis can do key/value store in addition to pub/sub queues. Approaches: single core vs multi-core servers. (smaller, single core servers can scale up and down better than larger, multi-core servers. Single server failures are easier to manage when the number of servers automatically scales.)

<strong>Abusing C# More by <a href="http://www.codemash.org/speaker/jon-skeet/" target="_blank">Jon Skeet</a>.</strong> Silly and amusing edge cases of C# 7. I'm pretty sure I will never use the <a href="https://codeblog.jonskeet.uk/2014/12/01/when-is-an-identifier-not-an-identifier-attack-of-the-mongolian-vowel-separator/">mongolian vowel separator</a>, but at least now I know that it exists.

<strong>Tune SQL Server Like a Guru – The Big Three! by <a href="http://www.codemash.org/speaker/kevin-boles/">Kevin Boles</a></strong>. The big three are File IO Stall differential analysis, Wait Stats differential analysis, and sp_whoisactive. Not a surprise to me, but it's still good to review them so that I don't feel like I'm missing out on some new method of figuring out where SQL Server is having problems. Mr. Boles is an excellent speaker, and it was helpful to hear his explanations of some of the wait types.

CXPACKET - excessive means inefficient parallel processing. See common TSQL Mistakes presentation (mismatched datatypes and function calls in WHERE clause). Adjust MAXDOP and cost threshold for paralelism. The default SQL Server configuration is bad. VMs can be especially bad: thin provisioned disks, underpowered CPU.

ASYNC_NETWORKIO - server-side cursors are really bad. MS Entity Framework often does this.

PAGELATCHIO - slow r/w to disk.

PAGELATCH - not related to disk. Just allocation/deallocation of pages. Only 1 thread can hold the 8 KB page at a time. See especially TempDB.

sp_WhoIsActive - best possible analysis tool. See also Ola Halagren's maintenance tool.

SSMS tools pack - costs about $50, but automatically puts begin tran/rollback in every new query window in SSMS. Could save your job.

<strong>An Applied Introduction to R by <a href="http://www.codemash.org/speaker/gary-short/">Gary Short</a></strong>. Difference between trading and gambling: you can play both sides in trading, but not in gambling. Also, you can't bet against a horse in gambling. I found some of the high frequency trading terms in this presentation to be confusing: Dutching (betting on multiple stocks simultaneously), Scalping (not ticket scalping; buy at Key prices, aka crossover points, are points at which the first derivative changes??), "Back" vs "Lay". I didn't get much R out of this talk.

<strong>Machine Learning for Predictive Hiring aka Recruiting Isn't Just Rainbows and Kittens by <a href="http://www.codemash.org/speaker/centric-consulting/">Carmen Fontana</a></strong>. Speaker used to be a dev, now a recruiter at a business consulting firm. 60% FT, 40% contractors. Many short term contracts. Machine Learning with Textio - optimizes job ads for length, sentence length, wording choices, gender tone, verb usage. This was a pretty interesting talk because I didn't know that some HR departments are getting better about not using keyword filtering for every job ad.

<strong>Machines Learning Human Biases: How Does It Happen? Can We Unteach Them? by <a href="http://www.codemash.org/speaker/devney-hamilton/">Devney Hamilton</a></strong>. Google Word2Vec (2013). MIT team used Google News data to produce vectors representing the similarities between words (i.e., a word embedding). The ANN produced male/female-aligned patterns that reflect the existing stereotypes. De-bias the vector space?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2017-01-31 11:27:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-31 11:27:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2017-fri]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linear algebra review</title>
		<link>http://www.djohn89.com/blog/2017/02/linear-algebra-review/</link>
		<pubDate>Fri, 24 Feb 2017 14:48:57 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>

It's been a while since I tried to solve a system of equations without
using a numerical library, so I figured it was time to do a linear
algebra review.

\[
A=\left[\begin{array}{cc}
1 & 2\\
3 & 4
\end{array}\right]=\left[\begin{array}{c}
r_{1}^{T}\\
r_{2}^{T}
\end{array}\right]=\left[\begin{array}{cc}
c_{1} & c_{2}\end{array}\right]
\]


This should be the easiest matrix to work with: small size, nice integer values, non-colinear columns and rows, non-zero determinant, full rank, etc. Let's go through the basic definitions, just because it's been a while. $A$ is 2x2 (MxN), which is small and square. Let's check the column space of $A$ for colinearity by reducing to row echelon form by adding $-3r_{1}^{T}$ to row 2:

\[
\left[\begin{array}{cc}
1 & 2\\
0 & -2
\end{array}\right]
\]


Then adding $r_{2}^{T}$ to row 1:

\[
\left[\begin{array}{cc}
1 & 0\\
0 & -2
\end{array}\right]
\]


So the good news is that the column space of $A$ has linearly independent columns, $\left[\begin{array}{c}
1\\
3
\end{array}\right]$ and $\left[\begin{array}{c}
2\\
4
\end{array}\right]$, which form a basis for $\mathbb{R^{\mathrm{2}}}$, and rank($A$) is 2. So the null space of $A$ is empty. That's the best possible outcome for a matrix because it means that an inverse exists. 

But before exploring that, let's think about the row space of $A$. Using the same row reductions as above, we can conclude that $A$ has linearly independent rows, $\left[\begin{array}{cc} 1 & 2\end{array}\right]$ and $\left[\begin{array}{cc} 3 & 4\end{array}\right]$, which form a basis for $\mathbb{R^{\mathrm{2}}}$, and rank($A^{T}$) is 2. So the left null space of $A$ is also empty. The row space of $A$ is isomorphic to the column space of $A^{T}$ by definition, and $A$ happens to have full rank, so an inverse exists. Let's use Gauss-Jordan elimination to find it:

\[
\left[\begin{array}{ccccc}
1 & 2 & | & 1 & 0\\
3 & 4 & | & 0 & 1
\end{array}\right]
\]


Starting with an augmented matrix $\left[\begin{array}{ccc}
A & | & I\end{array}\right]$, we can use row operations to find $\left[\begin{array}{ccc}
I & | & A^{-1}\end{array}\right]$. Add $-3r_{1}^{T}$ to row 2:

\[
\left[\begin{array}{ccccc}
1 & 2 & | & 1 & 0\\
0 & -2 & | & -3 & 1
\end{array}\right]
\]


Then add $r_{2}^{T}$ to row 1:

\[
\left[\begin{array}{ccccc}
1 & 0 & | & -2 & 1\\
0 & 2 & | & -3 & 1
\end{array}\right]
\]


Finally rescale row 2:

\[
\left[\begin{array}{ccccc}
1 & 0 & | & -2 & 1\\
0 & 1 & | & -\frac{3}{2} & \frac{1}{2}
\end{array}\right]
\]


Therefore: 

\[
A^{-1}=\left[\begin{array}{cc}
-2 & 1\\
-\frac{3}{2} & \frac{1}{2}
\end{array}\right]
\]


Now we need to check that $A^{-1}A=I$:
\begin{eqnarray*}
\left[\begin{array}{cc}
2 & 1\\
-\frac{3}{2} & \frac{1}{2}
\end{array}\right]\left[\begin{array}{cc}
1 & 2\\
3 & 4
\end{array}\right] & = & \left[\begin{array}{cc}
1 & 0\\
0 & 1
\end{array}\right]
\end{eqnarray*}


Of course, there is an explicit formula for the inverse of a 2x2 matrix:

\[
\left[\begin{array}{cc}
a & b\\
c & d
\end{array}\right]^{-1}=\frac{1}{\det A}\left[\begin{array}{cc}
d & -b\\
-c & a
\end{array}\right]
\]


For our $A$, $\det A=ad-bc=-2$. Unfortunately, analytical inverses don't exist for larger matrices, or they are so long and complex as to be of limited utility. But there is at least one important idea to take away from the inverse: it can only exist if the determinant is non-zero. This becomes a very important fact for the eigenvalue problem. 

One last thing I wanted to write about for now: the L2 norm (or Euclidean norm) of a vector $x=\left[\begin{array}{cccc}
x_{1} & x_{2} & \cdots & x_{n}\end{array}\right]^{T}$ is defined as:

\[
\left\Vert x\right\Vert _{2}^{2}=\sum_{i=1}^{n}x_{i}^{2}
\]


Suppose that we're fitting data $\left(a_{ij},y_{i}\right)$ to a known linear model$A$ and we want to determine the unknown coefficients $x$ that best fit the data using ordinary least squares:

\begin{eqnarray*}
\left[\begin{array}{c}
y_{1}\\
y_{2}\\
\vdots\\
y_{m}
\end{array}\right] & = & \left[\begin{array}{cccc}
a_{1,1} & a_{1,2} & \cdots & a_{1,n}\\
a_{2,1} & a_{2,2} & \cdots & a_{2,n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m,1} & a_{m,2} & \cdots & a_{m,n}
\end{array}\right]\left[\begin{array}{c}
x_{1}\\
x_{2}\\
\vdots\\
x_{n}
\end{array}\right]\\
y & = & Ax
\end{eqnarray*}


And we want to choose the $x$ which minimizes the L2 norm of the residuals because we assume them to be Gaussian:

\[
J\left(x\right)=\left\Vert Ax-y\right\Vert _{2}^{2}
\]


Then $J\left(x\right)$ can be expanded:

\begin{eqnarray*}
\left\Vert Ax-y\right\Vert _{2}^{2} & = & \left(Ax-y\right)^{T}\left(Ax-y\right)\\
 & = & \left(x^{T}A^{T}-y^{T}\right)\left(Ax-y\right)\\
 & = & x^{T}A^{T}Ax-x^{T}A^{T}y-y^{T}Ax+y^{T}y
\end{eqnarray*}


However, $x^{T}A^{T}y$ is a scalar that can be computed as $y^{T}Ax$ by reversing the order of the multiplications, so the last expression can be further simplied:

\begin{eqnarray*}
x^{T}A^{T}Ax-x^{T}A^{T}y-y^{T}Ax+y^{T}y & = & x^{T}A^{T}Ax-2y^{T}Ax+y^{T}y
\end{eqnarray*}


This might look ugly, but we can now minimize $J\left(x\right)$ by
taking the derivative with respect to $x$:

\begin{eqnarray*}
\frac{dJ\left(x\right)}{dx} & = & 2x^{T}A^{T}A-2y^{T}A\\
 & = & 2A^{T}Ax-2A^{T}y
\end{eqnarray*}


Where we used the fact that $x^{T}A^{T}A=A^{T}Ax$ and $y^{T}A=A^{T}y$ because it's just changing the order of the multiplications again.

Now we can derive the celebrated pseudo-inverse of $A$ by setting the derivative to zero:

\begin{eqnarray*}
2A^{T}Ax-2A^{T}y & = & 0\\
A^{T}Ax & = & A^{T}y\\
x & = & \left(A^{T}A\right)^{-1}A^{T}y
\end{eqnarray*}


However, the inverse of $A^{T}A$ may not exist, or it may be very hard to compute (due to numerical instability). An alternative solution is to use gradient descent. Since we already have $\frac{dJ\left(x\right)}{dx}$ in a nice form:

\begin{eqnarray*}
\frac{dJ\left(x\right)}{dx} & = & 2A^{T}\left(Ax-y\right)
\end{eqnarray*}


We can start at any point $x=x_{0}$ and take a step along the direction given by the derivative, $x_{1}=x_{0}-\gamma\frac{dJ\left(x\right)}{dx}$. The problem is how big of a step to take. Despite the existence of a global minimum and an analytical form for the derivative, the steps could either be too small (taking forever to converge) or too large (diverging even when starting near the global minimum). This is where I wrote a paper about bracketing the minimum using a priori constraints (i.e., Golden section search and Brent's method), but variations on line search minimization are also possible. 

I've read that the conjugate gradient method is the more popular solution to this problem now. Gradient descent searches strictly along the derivative, whereas the conjugate gradient method chooses a different search direction every time. The Grahm-Schmidt procedure is used to orthogonalize the gradient vectors, and then the conjugate gradient method moves along that new basis. This can be much faster than gradient descent, but it can become slow if the condition number of $A$ is too large. But it's still a good choice because it doesn't require the Hessian matrix to be calculated or inverted (as per Newton's method). 

If you've got lots of memory and $M,N$ are small-ish, the Levenberg-Marquardt algorithm can converge even faster because it approximates the Hessian with the Jacobian matrix and chooses directions either along the derivative or the Hessian, whichever is better. Unfortunately, it doesn't work with regularization, and it has a few more internal parameters, and it usually runs out of memory when computing $\left(J^{T}J+\lambda I\right)^{-1}$. So I usually end up using the conjugate gradient method anyway because it can be regularized and doesn't require crazy amounts of memory.

At CodeMash 2017 I heard a presentation about artificial neural networks where the presenter complained bitterly about how his L2 minimization (``backtracking'') in the neural network was converging very slowly. I thought to suggest an improved algorithm (conjugate gradient), but his talk was focused on a high level introduction with no math, so it didn't seem appropriate at the time. That inspired me to write this post. Then I saw that someone else already did conjugate gradients with artificial neural networks in 1992. :P
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2017-02-24 14:48:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-24 14:48:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linear-algebra-review]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[http://vioglichfu.7m.pl/index.php?n=25]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://vioglichfu.7m.pl/index.php?n=25</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[46.118.158.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-21 02:50:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-21 02:50:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cialis without a doctor's prescription</strong>

You actually mentioned this wonderfully!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Thoughts on Project Euler in Python</title>
		<link>http://www.djohn89.com/blog/2017/05/thoughts-on-project-euler-in-python/</link>
		<pubDate>Sat, 13 May 2017 14:35:37 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[I've been doing Project Euler problems to learn more about Python 3.5+ (as opposed to 2.7). The Project Euler website says, "Real learning is an active process and seeing how it is done is a long way from experiencing that epiphany of discovery. Please do not deny others what you have so richly valued yourself." So I'm not supposed to post full solutions or even hints. However, I can make general comments that are not specific to any Project Euler problems.

I find it very helpful to have the following tools ready to go before doing any Project Euler problems: a list of primes up to 10**9 or so, a list of primitive Pythagorean triplets up to 10**6, and the latest version of a big integer library. Much of Project Euler is based on prime numbers, so I used <a href="https://cr.yp.to/primegen.html">primegen</a> to create a text file with lots of primes in it. Reimplementing the Sieve of Eratosthenes gets really boring after a while, and the Sieve of Atkin is much better anyway.

Pythagorean triplets show up occasionally, so I have a static text file with primitive triplets up to 10**6. I used an existing <a href="http://www.mathblog.dk/tools/pythagorean-triplets-generator/">pythagorean triplets generator</a>, but <a href="https://en.wikipedia.org/wiki/Formulas_for_generating_Pythagorean_triples#Pythagorean_triples_by_use_of_matrices_and_linear_transformations">the matrix formula</a> isn't too terrible to implement.

Python 3 has much improved support arbitrary length integers over Python 2. The int datatype is gone, replaced by long, then unified back to int again. The only real problem is remembering the change in the integer division operator, but I've used "from future import __division__" practically everywhere.

Generators and comprehensions have big improvements in Python 3+. I really like them for using a functional programming style, and they can improve program speed and reduce memory usage a bit.

Finally, regardless of language, I always try to review some common strategies from dynamic programming and graph search algorithms. It's surprising how often these ideas are part of the best solutions to Project Euler problems.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2017-05-13 14:35:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-13 14:35:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thoughts-on-project-euler-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[vioglichfu.7m.pl]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://vioglichfu.7m.pl/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[178.137.88.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-18 20:57:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-18 20:57:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cialis generico http://vioglichfu.7m.pl/</strong>

Amazing info. Thank you!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Presentation idea - Using Columnstore Indexes to Store and Analyze Billions of Torques</title>
		<link>http://www.djohn89.com/blog/2017/07/presentation-idea-using-columnstore-indexes-to-store-and-analyze-billions-of-torques/</link>
		<pubDate>Sat, 22 Jul 2017 20:40:28 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<div>This is an abstract I wrote for a local area users group, only to find out that they had stopped meeting. Toledo doesn't seem to be able to keep many computer-based user interest groups alive. I'm posting it here for my own records.</div>
<div></div>
<div></div>
<div>Abstract</div>
<div>
Torque tools (impact wrenches, electronic motors, rotary torque sensors) produce lots of data as a vehicle is being built. Torque data is used to control the movement of the production lines and to do <a href="http://www.mountztorque.com/learning-center/torque-measurement" target="_blank" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.mountztorque.com/learning-center/torque-measurement&amp;source=gmail&amp;ust=1500842300619000&amp;usg=AFQjCNFrzpwwf1sLY-tiIVIb0Ows5tqAYQ">quality control analysis</a>. During production, traditional row-based storage makes the most sense, using the VIN and torque tool ID as the primary key in a table optimized for insertion speed and VIN-based lookups. However, post-production it makes more sense to switch to <span class="il">column</span>-based storage for quality control analysis because aggregation functions (mean, std. dev.) need to be computed over large ranges of data (regardless of VIN), and many torque values are similar. <span class="il">Columnstore</span> indexes are a good solution to the latter storage and analysis problem, and they have gotten much better in SQL Server 2016. I'll describe how they're useful for this problem for analyzing how well the torque tools are working <a href="https://en.wikipedia.org/wiki/Process_performance_index" target="_blank" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=https://en.wikipedia.org/wiki/Process_performance_index&amp;source=gmail&amp;ust=1500842300619000&amp;usg=AFQjCNG7FqaP0mYf2VrJ4N37cKPr6hMoaQ">using simple statistical techniques</a>.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2017-07-22 20:40:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-22 20:40:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[presentation-idea-using-columnstore-indexes-to-store-and-analyze-billions-of-torques]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[http://vioglichfu.7m.pl/index.php?n=25]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://vioglichfu.7m.pl/index.php?n=25</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[46.118.158.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-20 22:29:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-20 22:29:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cialis 20 mg</strong>

Very good postings. Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Presentation - Building Your Own Collaborative Editing Web Forms For Free</title>
		<link>http://www.djohn89.com/blog/2017/11/presentation-building-your-own-collaborative-editing-web-forms-for-free/</link>
		<pubDate>Tue, 07 Nov 2017 11:10:33 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Links to slides: <a href="https://docs.google.com/presentation/d/1MzVEcI69tGmkM168Kxfq166x8A1WbMHcp9qBiLkfVxE/edit?usp=sharing">Google Slides</a>,  <a href="http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pdf">PDF format</a>, <a href="http://www.djohn89.com/blog/wp-content/uploads/2017/11/CollabEdit-Presentation.pptx">PPT format</a> </strong>

Presented at <a href="https://www.meetup.com/GDGToledo/events/243610233/">Google Developers Group Toledo</a> and <a href="https://www.meetup.com/Toledo-Web-Professionals/events/244814755/">Toledo Web Professionals</a> meetings on Nov 9, 2017.
<h2>Abstract</h2>
Have your business users ever said, "we have this Excel form that we need to turn into a web form"? So you, as a full-stack web developer, turn it into a HTML form with an AJAX POST to save the data to a database table in the standard CRUD model. It works well enough, but then the users said, "we really need simultaneous editing for everyone in the office." Now you're in trouble because you're trying to reinvent Google Docs / Sheets, which are very complex. How do those collaborative editing tools really work?

We will look at the Google Realtime API, which uses Operational Transformation to automatically synchronize a document between multiple simultaneous editors. Everything you know about distributed version control systems applies to this situation, but now you need to make it work seamlessly for users who have never heard of "git rebase". The client and server implementation of Operational Transformation is very challenging.

Alternatives to Operational Transformation (OT) include Differential Synchronization (DS, aka. 3-way merge), Conflict-free Replicated Data Type (CRDT), and plain old Last Write Wins (LWW). For any of these methods, the critical elements include websockets, message queues, and persistent data storage. This presentation will include a demonstration of a simple implementation of collaborative editing with free, locally hosted software only.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2017-11-07 11:10:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-07 11:10:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[presentation-building-your-own-collaborative-editing-web-forms-for-free]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[vioglichfu.7m.pl]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://vioglichfu.7m.pl/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[178.137.88.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-18 20:25:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-18 20:25:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>cialis tablets australia http://vioglichfu.7m.pl/</strong>

Incredible all kinds of amazing facts!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[trackback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Presentations List</title>
		<link>http://www.djohn89.com/blog/2018/01/presentations-list/</link>
		<pubDate>Mon, 01 Jan 2018 16:17:16 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a list of work I've presented since 2015 at various local users groups and conferences. These projects show a commitment to continued professional development and networking. I'll keep updating this list as time goes by.
<h1>2018</h1>
<span class="il">FoxCon</span> <span class="il">Toledo</span> 2018 Presentation – Big Data from Automotive Assembly Errors (TBD: Jan 27, 2018 ?).

<a href="http://www.codemash.org/">CodeMash</a> 2018 Lightning talk (TBD) - Fast comparison of Tesseract and a Convolutional Recurrent Neural Network for automatically reading dot peened VIN stamps.
<h1>2017</h1>
<a href="https://www.meetup.com/GDGToledo/events/243610233/">Google Developers Group Toledo</a> and <a href="https://www.meetup.com/Toledo-Web-Professionals/events/244814755/">Toledo Web Professionals</a> meetings on Nov 9, 2017 - <a href="http://www.djohn89.com/blog/2017/11/presentation-building-your-own-collaborative-editing-web-forms-for-free/">Building Your Own Collaborative Editing Web Forms For Free</a>.

<span class="il">FoxCon</span> <span class="il">Toledo</span> 2017 Presentation – <a href="http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-presentation-using-machine-learning-to-automatically-predict-and-identify-defects-in-automotive-assembly-processes/" target="_blank" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.djohn89.com/blog/2017/01/foxcon-toledo-2017-presentation-using-machine-learning-to-automatically-predict-and-identify-defects-in-automotive-assembly-processes/&amp;source=gmail&amp;ust=1514908565417000&amp;usg=AFQjCNF1ecY_BFpXp3xt8jLTfTRhMzrmqA">Using Machine Learning to Automatically Predict and Identify Defects in Automotive Assembly Processes</a>

<a href="http://nwo.sqlpass.org/Home.aspx?EventID=3856">Northwest Ohio SQL PASS Chapter </a>presentation - <a href="http://www.djohn89.com/blog/2017/07/presentation-idea-using-columnstore-indexes-to-store-and-analyze-billions-of-torques/">Using Columnstore Indexes to Store and Analyze Billions of Torques</a>. <span style="color: #ff0000;">Cancelled because users group has been abandoned! </span>
<h1>2016</h1>
<a href="https://www.meetup.com/Toledo-Web-Professionals/"><span class="il">Toledo</span> Web Professionals</a> 2016 Presentation: <a href="http://www.djohn89.com/blog/2016/10/twp-presentation-real-time-messaging-to-webapps-from-a-production-database/" target="_blank" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.djohn89.com/blog/2016/10/twp-presentation-real-time-messaging-to-webapps-from-a-production-database/&amp;source=gmail&amp;ust=1514908565417000&amp;usg=AFQjCNEjUxyt16mSOaEdDOyptkxU07EeCg">Real-time Messaging to Webapps from a Production Database</a>

<span class="il">FoxCon</span> <span class="il">Toledo</span> 2016 Presentation - <a href="http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/" target="_blank" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.djohn89.com/blog/2016/03/foxcon2016-presentation-and-handout/&amp;source=gmail&amp;ust=1514908565417000&amp;usg=AFQjCNE8P7NBUArLgo8O5GVanmowSpSGNQ">Building Webapps to Help You Build a Jeep </a>(<a href="http://www.djohn89.com/blog/2016/01/foxcon2016-abstract-and-references/" target="_blank" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.djohn89.com/blog/2016/01/foxcon2016-abstract-and-references/&amp;source=gmail&amp;ust=1514908565417000&amp;usg=AFQjCNFZ_8hN-lU-gjDtbGvLcFVI75nmig">video references here</a>).
<h1>2015</h1>
<span class="il">FoxCon</span> <span class="il">Toledo</span> 2015 Presentation - <a href="http://www.djohn89.com/blog/2015/02/follow-up-nwnug-presentation/" target="_blank" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en&amp;q=http://www.djohn89.com/blog/2015/02/follow-up-nwnug-presentation/&amp;source=gmail&amp;ust=1514908565418000&amp;usg=AFQjCNG-SgeSfcjSIiF61A3rju_U5FQSHA">SQL Server Notifications in a manufacturing environment.</a> Also presented at the <a href="http://www.meetup.com/NW-NUG/">NWNUG meeting</a> in Feb 2015 and again at <a href="http://www.fanug.org/">the FANUG</a> meeting shortly after.

<a href="http://nwo.sqlpass.org/Home.aspx?EventID=3856">Northwest Ohio SQL PASS Chapter </a>Presentation - an edited version of <a href="http://www.djohn89.com/blog/2015/09/sql-server-users-group-presentation-nwo-pass/">SQL Server Notifications in a manufacturing environment</a> with less C# and more SQL Server details about database administration for Service Broker.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2018-01-01 16:17:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-01 16:17:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[presentations-list]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Codemash 2018 reviews</title>
		<link>http://www.djohn89.com/blog/2018/01/codemash-2018-reviews/</link>
		<pubDate>Sat, 13 Jan 2018 14:05:09 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[I'm writing my thoughts here about the sessions I attended at CodeMash 2018. Overall, I had a great time and learned some new and important things about the latest technologies. This year I tried to attend more data science / machine learning talks, though several of them were cancelled at the last minute. (Perhaps the bad weather was to blame.)

I wrote these notes during or immediately after each talk, and I submitted some of the text to the session survey part of the Attendee Hub app on my phone. I think it's a good idea to send the feedback to the speakers, but I don't think it is used by reviewers for next year, so I'm not sure it matters very much. Regardless, I write to consolidate my own learning, if for no other reason.
<h1><span id="rAECCd" role="heading" aria-level="1">Fast Neural Networks - a no brainer </span></h1>
Speakers: Riccardo Terrell

The speaker used the agent model because ANNs are embarassingly parallel. Map agents to nodes - 1:1, send updates between them (values forward, backpropagation corrections backward). Make agents reactive to messages (updates from dependent nodes). The speaker has an e-book on MEAP about it - Parallel NN as map reduce problem - simpler way to implement NN.

The speaker tried to cover too much content. Also, I didn't hear any good outcomes or reasons for why he reimplemented backpropagation (a very old algorithm). What was learned by redoing it with actors?
<h1><span id="rAECCd" role="heading" aria-level="1">Getting Started with Deep Learning</span></h1>
Speakers: Seth Juarez

confusion matrix- be careful of TN vs FP box location. Works for MS; uses VS to edit Python; tensorflow implementation in python for MNIST. Check channel 9 msdn for newer presentation

cool twilio use - text the presenter to ask questions during presentation

This speaker was great because he told lots of jokes to keep the talk interesting despite the underlying math. I really liked the twilio based questions via text messages!
<h1 class="yj6qo"><span id="rAECCd" role="heading" aria-level="1">Imposter Syndrome: Overcoming Self-Doubt in Success</span></h1>
<div class="yj6qo">Speakers: Heather Downing</div>
<div></div>
<div>
<div class="adL">

The speaker did a very good job motivating the subject, but I would've liked to hear more about practical things that can be done to deal with imposter syndrome. I agree with "co-bragging", but I think other good options include public speaking to build confidence or doing volunteer work to appreciate how it's a 1st world problem.

</div>
</div>
<div class="adL">

cycle of failure: overly confident - procrastinate and rely on luck. under confident - put in excessive time and effort. Discount success and undermine ego.

How can you tell if someone will eventually succeed after a failure? You are not the failure; own your mistakes and learn from them. Don't be scared of failure; be scared of not finding the truth.

"Co-bragging" - praise your co-workers' acheivements, and they praise you. Create a positive culture that avoids hurtful comparisons.

Fake it until you become it, then pay it forward.

</div>
<h1>Machine Learning at Scale, How to Keep Learning as Your Data Keeps Increasing</h1>
Speakers: Matt Winkler

This was exactly why I come to codemash - I want to hear about the latest tech so that I can keep up with the industry standards. I thought the speaker did an excellent job of reviewing the latest ML implementations and describing how to deploy them at scale. I loved all the detailed examples!

data prep: spark, pandas, dplyR
scale up: spark cluster, HDInsight
aggregation: AML workbench

Azure Machine Learning workbench can automatically learn how to create columns by example (formatting and aggregating a date time column). (automatically generates python code!)

Nvidia's latest GPU was announced at NIPS conference (academic AI researchers).

VM recommendations: use version control so that you can migrate easily. make scripts for any required setup. track your outcomes from experimenting with different models. benchmark the price effectiveness of different configurations.

home camera - Amazon deep lens - recognizes faces

MSSQL 2017 has integrated ML algorithms INSIDE it! see tutorials?!
<h1><span id="rAECCd" role="heading" aria-level="1">Walking the High Wire: Patching Erlang Live</span></h1>
Speakers: John Daily

The speaker did a great job of motivating the use of Erlang for live patches, which is exactly what I wanted to hear about. But I would've liked to have seen a non-trivial example, or some more information about how it's used in the real world.

Power isn't pretty - erlang is designed for fault tolerance, not usability. Its network IO is fundamentally async but reliable, unlike RPC or CORBRA.
<h1><span id="rAECCd" role="heading" aria-level="1">App architecture without RDBS vs NoSQL drama</span></h1>
Speakers: Jeff Putz

The speaker has a lot of good experience to share. He's obviously worked in diverse applications, and I appreciate hearing about tradeoffs between technologies instead of just advertising the latest tech. I think it's really important to repeat the message about not being obsessed with the latest tech just because it's new. I wish the presentation didn't get sidetracked by arguments about issues of personal preference in DB design.

NoSQL advantages - less CPU, high write thruput, maybe higher dev productivity

Fight the urge to normalize everything. Don't make complicated schema for queries that will never be used. Focus on the problem domain, not the persistence and code style. Running multiple queries can be OK (as compared to a join).

SQL can do key value pairs OK. The death of SQL in 2010 was greatly exaggerated.

Aggregate queries with joins cause lots of database work. Avoid redoing them in real time. Use the client layer to maintain a cached state of frequently queried aggregates; don't be afraid to store redundant data because it's so cheap now. SQL was originally designed to minimize storage at the expense of CPU (i.e. normalization).
<h1><span id="rAECCd" role="heading" aria-level="1">Scala for the Java Developer: It's Easier Than You Think</span></h1>
Speakers: Justin Pihony

I liked this talk because I want to learn at least one new programming paradigm every time I come to CodeMash, and the speaker did a great job of being an ambassador for Scala. I appreciated hearing about the limitations and realistic expectations for the language. Things to improve: show applications and companies using it.

Scala runs on JVM; compatible with java, but it's functional and immutable first. Less verbose; fixes many annoyances with Java's legacy conventions. Includes REPL.
<h1><span id="rAECCd" role="heading" aria-level="1">Ride the rails: Handling errors the functional way</span></h1>
Speakers: Sam Hanes

The speaker did a very good talk on functional programming basics in F#. I enjoy sessions like these for reminding me that there are alternatives to traditional imperative paradigms. Suggestion: use font colors with better contrast (dark red text on black backgrounds is difficult to read). Overall very good talk.

Functional programming - avoid mutable state.

Use bind to connect a switch function to two track handling. Exceptions can be converted into failures (if they are predictable enough to catch).
<h1>A Game of Theories: why languages do what they do</h1>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=2a823543-9c11-4f18-8af9-83fe28c595ec">Rae Krantz</a>

The speaker did a fun talk about comparing programming languages and GoT. This type of talk is nice to have as a break in between "serious business" and learning new tech. Suggestions: use the full time slot. Show the same algorithm implemented in different languages. Talk more about the supporting libraries (not just the language itself).

Ruby, python, go, erlang, clojure, JavaScript - not sure why these 6 as opposed to any other survey of languages. Popularity?

(I went to this talk because the session "<span id="rAECCd" role="heading" aria-level="1">The Polyglot Data Scientist - Adventures with R, Python, and SQL</span>" by Sarah Dutkiewicz was cancelled. It sounded like the snow storm scared a lot of people into leaving CodeMash early, and some other speakers cancelled their talks for being sick.)
<h2>Image Recognition with Convolutional Neural Networks using Keras and CoreML</h2>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=4c5bfe3c-98e5-4ea9-9750-d47c4ffc5e02">Tim LeMaster</a>

This talk was too introductory, barely covering any applications and only talking about history. I walked out after 10 minutes to go eat lunch and do professional networking.
<h1><span id="rAECCd" role="heading" aria-level="1">How to Count Your Chickens After They've Hatched</span></h1>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=b357b7ce-91ce-4292-90da-0a6956cd6156">Gary Short</a>

The speaker is very entertaining and amusing, and it's great to see a fun talk about a relevant topic (ML). Images are easy to relate to, and it'd be cool to see more talks with them. I don't think C# was the right choice for this algorithm - python sklearn has built-in implementations for this problem.

Counting chickens in brightfield images - threshold grayscale image, then try k-NN. k-NN doesn't work because k is unknown? The algorithm is pretty ad hoc, but more power to him if it works. 85% accurate but told to deploy it by customer farmer anyway.
<h1><a href="http://www.codemash.org/sessions?id=7864">[Sponsor Session] Attracting and Retaining Top Technical Talent (a.k.a. "Insomnia Cure #1 for Software Development Leaders") </a></h1>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=33fd3305-8986-425e-8656-6b5cc463c847"> Stout Systems</a>

This talk was pretty good, and it make me feel better about my chances of getting a different job someday. On a daily basis, I really have no idea how good the market is for programmers, but I still remember the 2004 IT recession.

top 5 for recruiting/retaining talent -

5. salary (and PTO, retirement, health care, bonus, stock, options - cash equivalents)

4. workplace culture (office space features, remote work, flex schedule, work/life balance)

3. career growth (holding same job for years is boring and a career killer; upskilling and training is good. )

2. [lack of] process (shifting requirements, changing priorities, inconsistent deadlines, no deployments) - also leadership issues (excessive meetings, no clear decisions).

1. technology stack (fear of extinction; huge, messy codebase) - transform or evolve, within appropriate constraints (relevant tech, reasonable schedules). automate mundane tasks (build, deploy). allow some freedom of tools (svn vs git, OS, editors).
<h1 class="schedule-session-title"><a href="http://www.codemash.org/sessions?id=7156"> R Performance (It’s not R, it’s You) </a></h1>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=afdd2428-10c7-4392-af03-ae467a114a50">Tim Hoolihan</a>

The speaker gave a pretty good overview of performance issues in R. I'm not really an R user, so I attended this talk just to see if it was much better or different than python based ML. My conclusion: no because R uses the python ML libraries!
<h1 class="schedule-session-title"><a href="http://www.codemash.org/sessions?id=7220"> How Not to Destroy Data </a></h1>
<b>Speakers:</b> <a href="http://www.codemash.org/speakers?speakerid=1434dfae-bc8d-4238-b34c-2afb3edab4b3">Michael Perry</a>

I liked how this talk summarized an academic topic in a relatable way. Despite being in the last time slot, I learned some fascinating ideas about Historical Modelling. I like having some more challenging topics to attend.

Audit log problems - not reliable or type safe. Large. Simple

Event sourcing. Derive object state by reading whole table of changes. Order is significant.

Historical modelling. Partially ordered. Not simple, but better??

* Every field is immutable
* Surrogate key is only used internally (not in API)
* everything else is the identity in API

Use timestamps as "uniquifiers"

* A fact cannot be deleted
* query uses WHERE NOT EXISTS subclause

speaker name precedessor record - a Name is identified by its nameId and all predecessor records. This is git-style version control inside a db!

Mutable properties can't be part of entity. detect and resolve conflicts via knowing predecessors.

Events move entities forward thru workflow, pointing backward to previous event.

Advantages: no locks. Offline data is OK. Cluster synch is easier (eventual consistency via Active-Active clusters). Microservice as historical db.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2018-01-13 14:05:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-13 14:05:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codemash-2018-reviews]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo 2018 Schedule</title>
		<link>http://www.djohn89.com/blog/2018/01/foxcon-toledo-2018-schedule/</link>
		<pubDate>Sun, 21 Jan 2018 20:30:54 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="color: #003300;"><strong>FoxCon Toledo 2018</strong></span>

Conference Presentation Schedule

Park Inn Hotel, Toledo, Ohio

January 27th &amp; 28th, 2018
<h2><span style="color: #003300;">Saturday January 27</span></h2>
<u>Time</u>    <u>Speaker</u>         <u>Topic</u>

08:00-09:00 <strong>Bob Ruple</strong>       <span style="color: #ff00ff;">Opening Comments</span>

09:00-10:15 <strong>Bob Pierce     </strong><span style="color: #ff00ff;">Living in a Legacy World</span>

10:15-10:30                Break

10:30-11:45 <strong>Doug Hennig     </strong><span style="color: #ff00ff;">Practical Uses of wwDotNetBridge to Extend Your VFP Applications</span>

<span style="color: #003300;"><strong>11:45-12:45 pm</strong><strong>              </strong><strong>Lunch at Park Inn Hotel</strong></span>

12:45-02:00 <strong>Sam Nasr </strong>       <span style="color: #ff00ff;">Data Time Travel with Temporal Tables</span>

02:00-02:15                 Break

02:15-03:15 <strong>David Johnson</strong>   <span style="color: #ff00ff;">Using Big Data from Automotive Assembly Errors</span>

03:15-03:30                Break

03:30-04:45 <strong>Dave Bernard    </strong><span style="color: #ff00ff;">Lessons Learned from 40 Years of Software Development</span>

06:30 Cocktails

07:30 Dinner
<h2><span style="color: #003300;">Sunday January 28</span></h2>
<u>Time</u>      <u>Speaker </u>       <u>Topic</u>

08:30-09:00 <strong>Bob Ruple</strong>       <span style="color: #ff00ff;">Opening Comments</span>

09:00-10:15 <strong>Ondrej Balas</strong>   <span style="color: #ff00ff;">Open Source Game Development in the .NET Ecosystem</span>

10:15-10:30                Break

10:30-11:45 <strong>Kevin Cully</strong>        <span style="color: #ff00ff;">Accessing and manipulating application data using Xojo</span>

<strong>    <span style="color: #003300;">11:45-12:45 pm</span></strong><span style="color: #003300;"><strong>              </strong><strong>Lunch at Park Inn Hotel</strong></span>

12:45-01:15 <strong>Mike Levy </strong>      <span style="color: #ff00ff;">Given I have to test, when I do, then it should be cool</span>

01:15-01:30                Break

01:30-02:45 <strong>Doug Hennig       </strong><span style="color: #ff00ff;">Creating Beautiful Web Sites Easily Using Bootstrap</span>

02:45-03:00               <span style="color: #ff00ff;"> Closing Comments</span>

<span style="color: #003300;"><strong>3:00 pm</strong><strong>                                       </strong><strong>Conference Dismisses</strong></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2018-01-21 20:30:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-21 20:30:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-2018-schedule]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FoxCon Toledo 2018 Abstracts</title>
		<link>http://www.djohn89.com/blog/2018/01/foxcon-toledo-2018-abstracts/</link>
		<pubDate>Fri, 26 Jan 2018 11:23:54 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><strong>FoxCon Toledo 2018 </strong>Conference Presentation Abstracts</h1>
Park Inn Hotel, Toledo, Ohio. January 27th &amp; 28th, 2018

<strong>Bob Pierce</strong>               Allentown

<span style="color: #ff00ff;">Living in a Legacy World</span>

Last year Bob showed a case study of automating Smooth-On Corp., a large chemical manufacturing plant in Allentown, using Visual FoxPro. This year he will delve into the issues and opportunities of the process of migrating a large legacy application while still having to maintain and actively develop it to meet current demand.  He will be discussing how the business model changes over time to transition from entrepreneurial to corporate and the role of senior (Legacy) management in transitioning the business to the next generation to ensure future growth and viability.  This session is designed to be interactive, so your input is welcome.

<strong>Dave Bernard</strong>           Atlanta

<span style="color: #ff00ff;">Lessons Learned from 40 Years of Software Development</span>

Well, 39 years, to be exact. Since the late 70's, Dave has worked on many software development projects (over 75 since 2000 alone), including mainframe, minicomputer, microcomputer, and mobile platforms, for many different industries, and in multiple countries. Dave will share a number of technical and non-technical lessons he's learned over that time, some that are obvious, some that are not-so-obvious, and some that are counterintuitive and even controversial. Dave expects this presentation to have a high interaction-to-material ratio.

<strong>David Johnson</strong>          Toledo

<span style="color: #ff00ff;">Big Data from Automotive Assembly Errors</span>

Electronic torque tools used in automobile production produce a large amount of data as workers and robots physically assemble a vehicle.  This data includes alarms and errors for various potential defects such as rehit bolts, cross-threaded bolts, incorrectly removed bolts, failure to achieve torque within engineering specifications, etc.  In his presentation David will reveal how an analysis of this data can yield new insights into the causes of operator errors and solutions in new quality auditing systems, both on and off the production line.

David Johnson is a Systems Control And Data Acquisition (SCADA) programmer at the Toledo South Assembly Plant, which has built the Jeep Wrangler from 2006 until April. After then, the plant will retool to produce the new Jeep Scrambler pickup truck, available to consumers in mid to late 2019. The new 2018 Jeep Wrangler is now available from the Toledo North Assembly Plant.

<strong>Doug Hennig</strong>          Winnipeg

<span style="color: #ff00ff;">Practical Uses of wwDotNetBridge to Extend Your VFP Applications</span>

wwDotNetBridge lets you call just about any .NET code directly from Visual FoxPro and helps overcome most of the limitations of regular .NET COM interop. This library by Rick Strahl allows you to provide .NET functionality to your Visual FoxPro applications that wouldn't otherwise be available. In this session, you'll see many practical examples that show how you can add new capabilities to your applications that would be difficult or impossible to achieve natively in Visual FoxPro.

<span style="color: #ff00ff;">Creating Beautiful Web Sites Easily Using Bootstrap</span>

Laying out a web page using HTML and CSS can be challenging. Do you use the older table mechanism or CSS floats to place objects side-by-side? How do you deal with differences in browsers? And what about handling different devices: phones, tablets, laptops, and desktops?

Bootstrap is a free, open source framework for developing responsive, mobile-first web sites. It solves many problems web developers typically face and makes it easy to create beautiful web sites in record time, even for inexperienced developers.

This session shows how to get started with Bootstrap, examines using its grid system to easily layout your page elements, and discusses how Bootstrap components add attractive and functional elements to your web site. We'll do a "makeover" of a real web site to show how easy is it to make it more attractive, functional, and mobile-friendly.

<strong>Kevin Cully</strong>               Atlanta

<span style="color: #ff00ff;">Accessing and manipulating application data using Xojo</span>

Xojo is a great tool for programmers who are used to developing in Visual Foxpro and Microsoft .NET. It allows application development, not just only Windows, but also Mac, Linux, Web, and iOS. This presentation will focus on the various techniques used in Xojo accesses to update data: SQL Pass Through, SQL Prepared Statements, and Object Relational Mapping.

For the last two years Kevin has a Senior Business Analyst and a DBA for the Cherokee County Government, deploying Xojo based solutions in a variety of county operational units. Kevin has two boys in college and a small farm where he lives with his wife and two dogs where they grow blueberries.

<strong>Mike Levy</strong>              Cincinnati

<span style="color: #ff00ff;">Given I have to test, when I do, then it should be cool</span>

The goal of this quick talk is to build awareness around a set of testing tools, commonly used in the Behavior-Driven Development space (BDD) for codifying acceptance criteria, but are additionally useful for the entire testing triangle.

<strong>Ondrej Balas</strong>          Detroit

<span style="color: #ff00ff;">Open Source Game Development in the .NET Ecosystem</span>

With so many frameworks to choose from, aspiring game developers are often overwhelmed with options. In this session we'll explore the decisions that go into choosing the right framework for your project. Next we'll look at one in particular: Duality. Duality is a flexible and open source framework for developing 2D games with .NET. I'll show you the fundamental patterns and principles behind game development and walk you through creating a simple game in Duality.

Ondrej Balas is the owner of UseTech Design, a Michigan-based development company that focuses primarily on .NET and other Microsoft technologies. Ondrej is also a Microsoft MVP in Visual Studio and Development Technologies, a writer for Visual Studio Magazine, and is very active in the Michigan software development community. Ondrej works across many industries including finance, healthcare, manufacturing, and logistics. Areas of expertise include similarity and matching across large data sets, algorithm design, distributed architecture, and software development practices.

<strong>Sam Nasr</strong>             Cleveland

<span style="color: #ff00ff;">Data Time Travel with Temporal Tables</span>

SQL Server 2016 introduced Temporal Tables, allowing a developer to retrieve data from a specific point in time, without backups.  With a few TSQL commands a historical table can be created, automatically updated, and readily accessed.

Sam Nasr has been a software developer since 1995, focusing mostly on Microsoft technologies. Having achieved multiple certifications from Microsoft (MCSA, MCAD, MCTS, and MCT), Sam develops, teaches, and tours the country to present various topics in .Net. He’s involved with the Cleveland C#/VB.Net User Group, where he has been the group leader since 2003. In addition, he’s the leader of the .Net Study Group, an author for Visual Studio Magazine, and a Microsoft MVP since 2013.  When not coding, Sam loves spending time with his family and friends or volunteering at his local church.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2018-01-26 11:23:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-26 11:23:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[foxcon-toledo-2018-abstracts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Presentation - Using Big Data from Automotive Assembly Errors</title>
		<link>http://www.djohn89.com/blog/2018/01/presentation-using-big-data-from-automotive-assembly-errors/</link>
		<pubDate>Sat, 27 Jan 2018 13:09:13 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a link to the slides (<a href="https://docs.google.com/presentation/d/1w3nDW61PHT1FMIiVjEIpNYHYvJ9M8jJm4r2Q8wTdE40/edit?usp=sharing">Google slides</a>)

Presented at FoxCon Toledo Software Developers Conference, Toledo, OH, on 1/27/2018.

Abstract:

Electronic torque tools used in automobile production produce a large amount of data as workers and robots physically assemble a vehicle. This data includes alarms and errors for various potential defects such as rehit bolts, cross-threaded bolts, incorrectly removed bolts, failure to achieve torque within engineering specifications, etc. In his presentation David will reveal how an analysis of this data can yield new insights into the causes of operator errors and solutions in new quality auditing systems, both on and off the production line.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2018-01-27 13:09:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-27 13:09:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[presentation-using-big-data-from-automotive-assembly-errors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extending Wonderware with RabbitMQ</title>
		<link>http://www.djohn89.com/blog/2018/05/extending-wonderware-with-rabbitmq/</link>
		<pubDate>Mon, 14 May 2018 10:16:58 +0000</pubDate>
		<dc:creator><![CDATA[djohn89]]></dc:creator>
		<guid isPermaLink="false">http://www.djohn89.com/blog/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[Wonderware makes excellent HMIs (computer displays in an industrial environment), but what if you have a large legacy C# application that you want to use with Wonderware without paying for more licenses? I ran into this situation recently, and I came up with the following solution: create an "adapter" program that provides <a href="https://www.rabbitmq.com/">RabbitMQ</a> functionality inside the Wonderware galaxy.

Specifically, load the <a href="https://www.wonderware.com/hmi-scada/toolkits/">MX Access Toolkit</a> DLL and the RabbitMQ.NET client, and translate messages in between them. So if you get a RabbitMQ message that says "change Wonderware attribute X to a new value Y", then the adapter does the equivalent operation in the Galaxy using the MX Access Toolkit. If a Wonderware attribute changes value (using MX Access subscribe()), then post a RabbitMQ message indicating the updated value to non-Wonderware clients who read messages from RabbitMQ. I used JSON for the message format because it's simple, universally supported, and not too big.

This approach provides bi-directional communication between everything in Wonderware and everything outside Wonderware, using RabbitMQ as the universal platform for exchanging messages. RabbitMQ is free (but commercial support is available from Pivotal), fast, and very reliable. RabbitMQ can also reach web applications using WebSTOMP (i.e., Javascript) and non-C# applications using the other client libraries (Java, C++, Python, etc.).

Limitations of this approach: Wonderware is expensive, so if you just want a PLC communication library, you should use Kepware. Obviously, you're not going get tech support for extending Wonderware in this way, and since you're avoiding a lot of license fees per computer (Platform, ArchestrA license), you won't get any help from the sales department either. Also, Wonderware now includes its own webserver, so you could just use that for your web applications.

For more details, see the source code at <a href="https://github.com/znoop333/RMQWonderwareAdapter">https://github.com/znoop333/RMQWonderwareAdapter</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2018-05-14 10:16:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-14 10:16:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[extending-wonderware-with-rabbitmq]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
